{"ast":null,"code":"import { Injectable, Optional, Inject, PLATFORM_ID, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/platform.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nlet hasV8BreakIterator; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\n\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n} catch (_a) {\n  hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n\n\nlet Platform = /*#__PURE__*/(() => {\n  class Platform {\n    /**\n     * \\@breaking-change 8.0.0 remove optional decorator\n     * @param {?=} _platformId\n     */\n    constructor(_platformId) {\n      this._platformId = _platformId; // We want to use the Angular platform check because if the Document is shimmed\n      // without the navigator, the following checks will fail. This is preferred because\n      // sometimes the Document may be shimmed without the user's knowledge or intention\n\n      /**\n       * Whether the Angular application is being rendered in the browser.\n       */\n\n      this.isBrowser = this._platformId ? isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n      /**\n       * Whether the current browser is Microsoft Edge.\n       */\n\n      this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n      /**\n       * Whether the current rendering engine is Microsoft Trident.\n       */\n\n      this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent); // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n\n      /**\n       * Whether the current rendering engine is Blink.\n       */\n\n      this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT; // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n      // ensure that Webkit runs standalone and is not used as another engine's base.\n\n      /**\n       * Whether the current rendering engine is WebKit.\n       */\n\n      this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n      /**\n       * Whether the current platform is Apple iOS.\n       */\n\n      this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window); // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n      // them self as Gecko-like browsers and modify the userAgent's according to that.\n      // Since we only cover one explicit Firefox case, we can simply check for Firefox\n      // instead of having an unstable check for Gecko.\n\n      /**\n       * Whether the current browser is Firefox.\n       */\n\n      this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n      /**\n       * Whether the current platform is Android.\n       */\n      // Trident on mobile adds the android platform to the userAgent to trick detections.\n\n      this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT; // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n      // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n      // Safari browser should also use Webkit as its layout engine.\n\n      /**\n       * Whether the current browser is Safari.\n       */\n\n      this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n\n  }\n\n  Platform.ɵfac = function Platform_Factory(t) {\n    return new (t || Platform)(ɵngcc0.ɵɵinject(PLATFORM_ID, 8));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  Platform.ɵprov = ɵɵdefineInjectable({\n    factory: function Platform_Factory() {\n      return new Platform(ɵɵinject(PLATFORM_ID, 8));\n    },\n    token: Platform,\n    providedIn: \"root\"\n  });\n  return Platform;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * Whether the Angular application is being rendered in the browser.\n   * @type {?}\n   */\n  Platform.prototype.isBrowser;\n  /**\n   * Whether the current browser is Microsoft Edge.\n   * @type {?}\n   */\n\n  Platform.prototype.EDGE;\n  /**\n   * Whether the current rendering engine is Microsoft Trident.\n   * @type {?}\n   */\n\n  Platform.prototype.TRIDENT;\n  /**\n   * Whether the current rendering engine is Blink.\n   * @type {?}\n   */\n\n  Platform.prototype.BLINK;\n  /**\n   * Whether the current rendering engine is WebKit.\n   * @type {?}\n   */\n\n  Platform.prototype.WEBKIT;\n  /**\n   * Whether the current platform is Apple iOS.\n   * @type {?}\n   */\n\n  Platform.prototype.IOS;\n  /**\n   * Whether the current browser is Firefox.\n   * @type {?}\n   */\n\n  Platform.prototype.FIREFOX;\n  /**\n   * Whether the current platform is Android.\n   * @type {?}\n   */\n\n  Platform.prototype.ANDROID;\n  /**\n   * Whether the current browser is Safari.\n   * @type {?}\n   */\n\n  Platform.prototype.SAFARI;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Platform.prototype._platformId;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/platform-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet PlatformModule = /*#__PURE__*/(() => {\n  class PlatformModule {}\n\n  PlatformModule.ɵfac = function PlatformModule_Factory(t) {\n    return new (t || PlatformModule)();\n  };\n\n  PlatformModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PlatformModule\n  });\n  PlatformModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return PlatformModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/input-types.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cached result Set of input types support by the current browser.\n * @type {?}\n */\n\n\nlet supportedInputTypes;\n/**\n * Types of `<input>` that *might* be supported.\n * @type {?}\n */\n\nconst candidateInputTypes = [// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n// first changing it to something else:\n// The specified value \"\" does not conform to the required format.\n// The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];\n/**\n * @return {?} The input types supported by this browser.\n */\n\nfunction getSupportedInputTypes() {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  } // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n\n\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n  /** @type {?} */\n\n\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n  return supportedInputTypes;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/passive-listeners.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cached result of whether the user's browser supports passive event listeners.\n * @type {?}\n */\n\n\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n * @return {?}\n */\n\nfunction supportsPassiveEventListeners() {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n        get:\n        /**\n        * @return {?}\n        */\n        () => supportsPassiveEvents = true\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param {?} options Object to be normalized.\n * @return {?}\n */\n\n\nfunction normalizePassiveListenerOptions(options) {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/scrolling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @enum {number} */\n\n\nconst RtlScrollAxisType = {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL: 0,\n\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED: 1,\n\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED: 2\n};\n/**\n * Cached result of the way the browser handles the horizontal scroll axis in RTL mode.\n * @type {?}\n */\n\nlet rtlScrollAxisType;\n/**\n * Check whether the browser supports scroll behaviors.\n * @return {?}\n */\n\nfunction supportsScrollBehavior() {\n  return !!(typeof document == 'object' && 'scrollBehavior' in document.documentElement.style);\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n * @return {?}\n */\n\n\nfunction getRtlScrollAxisType() {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return 0\n    /* NORMAL */\n    ;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n\n    /** @type {?} */\n    const scrollContainer = document.createElement('div');\n    /** @type {?} */\n\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.height = '1px';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n    /** @type {?} */\n\n    const content = document.createElement('div');\n    /** @type {?} */\n\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n    rtlScrollAxisType = 0\n    /* NORMAL */\n    ; // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? 1\n      /* NEGATED */\n      : 2\n      /* INVERTED */\n      ;\n    }\n\n    scrollContainer.parentNode.removeChild(scrollContainer);\n  }\n\n  return rtlScrollAxisType;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/shadow-dom.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @type {?} */\n\n\nlet shadowDomIsSupported;\n/**\n * Checks whether the user's browser support Shadow DOM.\n * @return {?}\n */\n\nfunction _supportsShadowDom() {\n  if (shadowDomIsSupported == null) {\n    /** @type {?} */\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n/**\n * Gets the shadow root of an element, if supported and the element is inside the Shadow DOM.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction _getShadowRoot(element) {\n  if (_supportsShadowDom()) {\n    /** @type {?} */\n    const rootNode = element.getRootNode ? element.getRootNode() : null; // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Platform, PlatformModule, _getShadowRoot, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior }; //# sourceMappingURL=platform.js.map","map":null,"metadata":{},"sourceType":"module"}