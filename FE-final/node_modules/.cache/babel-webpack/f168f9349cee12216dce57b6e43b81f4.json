{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, QueryList, isDevMode, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Platform, normalizePassiveListenerOptions, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/aria-describer/aria-reference.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * IDs are delimited by an empty space, as per the spec.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  const ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(\n  /**\n  * @param {?} existingId\n  * @return {?}\n  */\n  existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  const ids = getAriaReferenceIds(el, attr);\n  /** @type {?} */\n\n  const filteredIds = ids.filter(\n  /**\n  * @param {?} val\n  * @return {?}\n  */\n  val => val != id.trim());\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/aria-describer/aria-describer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n * @record\n */\n\n\nfunction RegisteredMessage() {}\n\nif (false) {\n  /**\n   * The element containing the message.\n   * @type {?}\n   */\n  RegisteredMessage.prototype.messageElement;\n  /**\n   * The number of elements that reference this message element via `aria-describedby`.\n   * @type {?}\n   */\n\n  RegisteredMessage.prototype.referenceCount;\n}\n/**\n * ID used for the body container where all messages are appended.\n * @type {?}\n */\n\n\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @type {?}\n */\n\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @type {?}\n */\n\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/**\n * Global incremental identifier for each registered message element.\n * @type {?}\n */\n\nlet nextId = 0;\n/**\n * Global map of all registered message elements that have been placed into the document.\n * @type {?}\n */\n\nconst messageRegistry = /*#__PURE__*/new Map();\n/**\n * Container for all registered messages.\n * @type {?}\n */\n\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n\nlet AriaDescriber = /*#__PURE__*/(() => {\n  class AriaDescriber {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n      this._document = _document;\n    }\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n\n\n    describe(hostElement, message) {\n      if (!this._canBeDescribed(hostElement, message)) {\n        return;\n      }\n\n      if (typeof message !== 'string') {\n        // We need to ensure that the element has an ID.\n        this._setMessageId(message);\n\n        messageRegistry.set(message, {\n          messageElement: message,\n          referenceCount: 0\n        });\n      } else if (!messageRegistry.has(message)) {\n        this._createMessageElement(message);\n      }\n\n      if (!this._isElementDescribedByMessage(hostElement, message)) {\n        this._addMessageReference(hostElement, message);\n      }\n    }\n    /**\n     * Removes the host element's aria-describedby reference to the message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n\n\n    removeDescription(hostElement, message) {\n      if (!this._isElementNode(hostElement)) {\n        return;\n      }\n\n      if (this._isElementDescribedByMessage(hostElement, message)) {\n        this._removeMessageReference(hostElement, message);\n      } // If the message is a string, it means that it's one that we created for the\n      // consumer so we can remove it safely, otherwise we should leave it in place.\n\n\n      if (typeof message === 'string') {\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n          this._deleteMessageElement(message);\n        }\n      }\n\n      if (messagesContainer && messagesContainer.childNodes.length === 0) {\n        this._deleteMessagesContainer();\n      }\n    }\n    /**\n     * Unregisters all created message elements and removes the message container.\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      /** @type {?} */\n      const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n      for (let i = 0; i < describedElements.length; i++) {\n        this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n      }\n\n      if (messagesContainer) {\n        this._deleteMessagesContainer();\n      }\n\n      messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     * @private\n     * @param {?} message\n     * @return {?}\n     */\n\n\n    _createMessageElement(message) {\n      /** @type {?} */\n      const messageElement = this._document.createElement('div');\n\n      this._setMessageId(messageElement);\n\n      messageElement.textContent = message;\n\n      this._createMessagesContainer();\n\n      messagesContainer.appendChild(messageElement);\n      messageRegistry.set(message, {\n        messageElement,\n        referenceCount: 0\n      });\n    }\n    /**\n     * Assigns a unique ID to an element, if it doesn't have one already.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n\n    _setMessageId(element) {\n      if (!element.id) {\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n      }\n    }\n    /**\n     * Deletes the message element from the global messages container.\n     * @private\n     * @param {?} message\n     * @return {?}\n     */\n\n\n    _deleteMessageElement(message) {\n      /** @type {?} */\n      const registeredMessage = messageRegistry.get(message);\n      /** @type {?} */\n\n      const messageElement = registeredMessage && registeredMessage.messageElement;\n\n      if (messagesContainer && messageElement) {\n        messagesContainer.removeChild(messageElement);\n      }\n\n      messageRegistry.delete(message);\n    }\n    /**\n     * Creates the global container for all aria-describedby messages.\n     * @private\n     * @return {?}\n     */\n\n\n    _createMessagesContainer() {\n      if (!messagesContainer) {\n        /** @type {?} */\n        const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n        // already a container on the page, but we don't have a reference to it. Clear the\n        // old container so we don't get duplicates. Doing this, instead of emptying the previous\n        // container, should be slightly faster.\n\n\n        if (preExistingContainer) {\n          preExistingContainer.parentNode.removeChild(preExistingContainer);\n        }\n\n        messagesContainer = this._document.createElement('div');\n        messagesContainer.id = MESSAGES_CONTAINER_ID;\n        messagesContainer.setAttribute('aria-hidden', 'true');\n        messagesContainer.style.display = 'none';\n\n        this._document.body.appendChild(messagesContainer);\n      }\n    }\n    /**\n     * Deletes the global messages container.\n     * @private\n     * @return {?}\n     */\n\n\n    _deleteMessagesContainer() {\n      if (messagesContainer && messagesContainer.parentNode) {\n        messagesContainer.parentNode.removeChild(messagesContainer);\n        messagesContainer = null;\n      }\n    }\n    /**\n     * Removes all cdk-describedby messages that are hosted through the element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n\n    _removeCdkDescribedByReferenceIds(element) {\n      // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n\n      /** @type {?} */\n      const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(\n      /**\n      * @param {?} id\n      * @return {?}\n      */\n      id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n      element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n\n    _addMessageReference(element, message) {\n      /** @type {?} */\n      const registeredMessage = messageRegistry.get(message); // Add the aria-describedby reference and set the\n      // describedby_host attribute to mark the element.\n\n      addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n      registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n\n    _removeMessageReference(element, message) {\n      /** @type {?} */\n      const registeredMessage = messageRegistry.get(message);\n      registeredMessage.referenceCount--;\n      removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /**\n     * Returns true if the element has been described by the provided message ID.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n\n    _isElementDescribedByMessage(element, message) {\n      /** @type {?} */\n      const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n      /** @type {?} */\n\n      const registeredMessage = messageRegistry.get(message);\n      /** @type {?} */\n\n      const messageId = registeredMessage && registeredMessage.messageElement.id;\n      return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /**\n     * Determines whether a message can be described on a particular element.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n\n\n    _canBeDescribed(element, message) {\n      if (!this._isElementNode(element)) {\n        return false;\n      }\n\n      if (message && typeof message === 'object') {\n        // We'd have to make some assumptions about the description element's text, if the consumer\n        // passed in an element. Assume that if an element is passed in, the consumer has verified\n        // that it can be used as a description.\n        return true;\n      }\n      /** @type {?} */\n\n\n      const trimmedMessage = message == null ? '' : `${message}`.trim();\n      /** @type {?} */\n\n      const ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n      // element, because screen readers will end up reading out the same text twice in a row.\n\n      return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /**\n     * Checks whether a node is an Element node.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n\n    _isElementNode(element) {\n      return element.nodeType === this._document.ELEMENT_NODE;\n    }\n\n  }\n\n  AriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n    return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  AriaDescriber.ɵprov = ɵɵdefineInjectable({\n    factory: function AriaDescriber_Factory() {\n      return new AriaDescriber(ɵɵinject(DOCUMENT));\n    },\n    token: AriaDescriber,\n    providedIn: \"root\"\n  });\n  return AriaDescriber;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  AriaDescriber.prototype._document;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/key-manager/list-key-manager.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * This interface is for items that can be passed to a ListKeyManager.\n * @record\n */\n\n\nfunction ListKeyManagerOption() {}\n\nif (false) {\n  /**\n   * Whether the option is disabled.\n   * @type {?|undefined}\n   */\n  ListKeyManagerOption.prototype.disabled;\n  /**\n   * Gets the label for this option.\n   * @return {?}\n   */\n\n  ListKeyManagerOption.prototype.getLabel = function () {};\n}\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\n\n\nclass ListKeyManager {\n  /**\n   * @param {?} _items\n   */\n  constructor(_items) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn =\n    /**\n    * @param {?} item\n    * @return {?}\n    */\n    item => item.disabled; // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /**\n     * Stream that emits whenever the active item of the list manager changes.\n     */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(\n      /**\n      * @param {?} newItems\n      * @return {?}\n      */\n      newItems => {\n        if (this._activeItem) {\n          /** @type {?} */\n          const itemArray = newItems.toArray();\n          /** @type {?} */\n\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} predicate Function that determines whether the given item should be skipped.\n   * @return {THIS}\n   */\n\n\n  skipPredicate(predicate) {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n   * @return {THIS}\n   */\n\n\n  withWrap(shouldWrap = true) {\n    this._wrap = shouldWrap;\n    return this;\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} enabled Whether vertical selection should be enabled.\n   * @return {THIS}\n   */\n\n\n  withVerticalOrientation(enabled = true) {\n    this._vertical = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} direction Direction in which the selection can be moved.\n   * @return {THIS}\n   */\n\n\n  withHorizontalOrientation(direction) {\n    this._horizontal = direction;\n    return this;\n  }\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} keys\n   * @return {THIS}\n   */\n\n\n  withAllowedModifierKeys(keys) {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n   * @return {THIS}\n   */\n\n\n  withTypeAhead(debounceInterval = 200) {\n    if (this._items.length && this._items.some(\n    /**\n    * @param {?} item\n    * @return {?}\n    */\n    item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n\n\n    this._typeaheadSubscription = this._letterKeyStream.pipe(tap(\n    /**\n    * @param {?} letter\n    * @return {?}\n    */\n    letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(\n    /**\n    * @return {?}\n    */\n    () => this._pressedLetters.length > 0), map(\n    /**\n    * @return {?}\n    */\n    () => this._pressedLetters.join(''))).subscribe(\n    /**\n    * @param {?} inputString\n    * @return {?}\n    */\n    inputString => {\n      /** @type {?} */\n      const items = this._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n\n\n      for (let i = 1; i < items.length + 1; i++) {\n        /** @type {?} */\n        const index = (this._activeItemIndex + i) % items.length;\n        /** @type {?} */\n\n        const item = items[index];\n\n        if (!this._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      this._pressedLetters = [];\n    });\n    return this;\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  setActiveItem(item) {\n    /** @type {?} */\n    const previousIndex = this._activeItemIndex;\n    this.updateActiveItem(item);\n\n    if (this._activeItemIndex !== previousIndex) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param {?} event Keyboard event to be used for determining which element should be active.\n   * @return {?}\n   */\n\n\n  onKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    /** @type {?} */\n\n    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    /** @type {?} */\n\n    const isModifierAllowed = modifiers.every(\n    /**\n    * @param {?} modifier\n    * @return {?}\n    */\n    modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        } // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n\n\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /**\n   * Index of the currently active item.\n   * @return {?}\n   */\n\n\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /**\n   * The active item.\n   * @return {?}\n   */\n\n\n  get activeItem() {\n    return this._activeItem;\n  }\n  /**\n   * Gets whether the user is currently typing into the manager using the typeahead feature.\n   * @return {?}\n   */\n\n\n  isTyping() {\n    return this._pressedLetters.length > 0;\n  }\n  /**\n   * Sets the active item to the first enabled item in the list.\n   * @return {?}\n   */\n\n\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /**\n   * Sets the active item to the last enabled item in the list.\n   * @return {?}\n   */\n\n\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n  /**\n   * Sets the active item to the next enabled item in the list.\n   * @return {?}\n   */\n\n\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /**\n   * Sets the active item to a previous enabled item in the list.\n   * @return {?}\n   */\n\n\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  updateActiveItem(item) {\n    /** @type {?} */\n    const itemArray = this._getItemsArray();\n    /** @type {?} */\n\n\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    /** @type {?} */\n\n    const activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.\n\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   * @private\n   * @param {?} delta\n   * @return {?}\n   */\n\n\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   * @private\n   * @param {?} delta\n   * @return {?}\n   */\n\n\n  _setActiveInWrapMode(delta) {\n    /** @type {?} */\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      /** @type {?} */\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      /** @type {?} */\n\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   * @private\n   * @param {?} delta\n   * @return {?}\n   */\n\n\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   * @private\n   * @param {?} index\n   * @param {?} fallbackDelta\n   * @return {?}\n   */\n\n\n  _setActiveItemByIndex(index, fallbackDelta) {\n    /** @type {?} */\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n  /**\n   * Returns the items as an array.\n   * @private\n   * @return {?}\n   */\n\n\n  _getItemsArray() {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ListKeyManager.prototype._activeItemIndex;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ListKeyManager.prototype._activeItem;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ListKeyManager.prototype._wrap;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ListKeyManager.prototype._letterKeyStream;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ListKeyManager.prototype._typeaheadSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ListKeyManager.prototype._vertical;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ListKeyManager.prototype._horizontal;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ListKeyManager.prototype._allowedModifierKeys;\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   * @type {?}\n   * @private\n   */\n\n  ListKeyManager.prototype._skipPredicateFn;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ListKeyManager.prototype._pressedLetters;\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   * @type {?}\n   */\n\n  ListKeyManager.prototype.tabOut;\n  /**\n   * Stream that emits whenever the active item of the list manager changes.\n   * @type {?}\n   */\n\n  ListKeyManager.prototype.change;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ListKeyManager.prototype._items;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/key-manager/activedescendant-key-manager.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n * @record\n */\n\n\nfunction Highlightable() {}\n\nif (false) {\n  /**\n   * Applies the styles for an active item to this item.\n   * @return {?}\n   */\n  Highlightable.prototype.setActiveStyles = function () {};\n  /**\n   * Applies the styles for an inactive item to this item.\n   * @return {?}\n   */\n\n\n  Highlightable.prototype.setInactiveStyles = function () {};\n}\n/**\n * @template T\n */\n\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/key-manager/focus-key-manager.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n * @record\n */\n\n\nfunction FocusableOption() {}\n\nif (false) {\n  /**\n   * Focuses the `FocusableOption`.\n   * @param {?=} origin\n   * @return {?}\n   */\n  FocusableOption.prototype.focus = function (origin) {};\n}\n/**\n * @template T\n */\n\n\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} origin Focus origin to be used when focusing items.\n   * @return {THIS}\n   */\n\n\n  setFocusOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  setActiveItem(item) {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  FocusKeyManager.prototype._origin;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/interactivity-checker/interactivity-checker.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n\n\nlet InteractivityChecker = /*#__PURE__*/(() => {\n  class InteractivityChecker {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n      this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is disabled.\n     */\n\n\n    isDisabled(element) {\n      // This does not capture some cases, such as a non-form control with a disabled attribute or\n      // a form control inside of a disabled form, but should capture the most common cases.\n      return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @param {?} element\n     * @return {?} Whether the element is visible.\n     */\n\n\n    isVisible(element) {\n      return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is tabbable.\n     */\n\n\n    isTabbable(element) {\n      // Nothing is tabbable on the server 😎\n      if (!this._platform.isBrowser) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      const frameElement = getFrameElement(getWindow(element));\n\n      if (frameElement) {\n        /** @type {?} */\n        const frameType = frameElement && frameElement.nodeName.toLowerCase(); // Frame elements inherit their tabindex onto all child elements.\n\n        if (getTabIndexValue(frameElement) === -1) {\n          return false;\n        } // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n\n\n        if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n          return false;\n        } // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n\n\n        if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n          return false;\n        }\n      }\n      /** @type {?} */\n\n\n      let nodeName = element.nodeName.toLowerCase();\n      /** @type {?} */\n\n      let tabIndexValue = getTabIndexValue(element);\n\n      if (element.hasAttribute('contenteditable')) {\n        return tabIndexValue !== -1;\n      }\n\n      if (nodeName === 'iframe') {\n        // The frames may be tabbable depending on content, but it's not possibly to reliably\n        // investigate the content of the frames.\n        return false;\n      }\n\n      if (nodeName === 'audio') {\n        if (!element.hasAttribute('controls')) {\n          // By default an <audio> element without the controls enabled is not tabbable.\n          return false;\n        } else if (this._platform.BLINK) {\n          // In Blink <audio controls> elements are always tabbable.\n          return true;\n        }\n      }\n\n      if (nodeName === 'video') {\n        if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n          // In Trident a <video> element without the controls enabled is not tabbable.\n          return false;\n        } else if (this._platform.BLINK || this._platform.FIREFOX) {\n          // In Chrome and Firefox <video controls> elements are always tabbable.\n          return true;\n        }\n      }\n\n      if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n        // In all Blink and WebKit based browsers <object> elements are never tabbable.\n        return false;\n      } // In iOS the browser only considers some specific elements as tabbable.\n\n\n      if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n        return false;\n      }\n\n      return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is focusable.\n     */\n\n\n    isFocusable(element) {\n      // Perform checks in order of left to most expensive.\n      // Again, naive approach that does not capture many edge cases and browser quirks.\n      return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n    }\n\n  }\n\n  InteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n    return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  InteractivityChecker.ɵprov = ɵɵdefineInjectable({\n    factory: function InteractivityChecker_Factory() {\n      return new InteractivityChecker(ɵɵinject(Platform));\n    },\n    token: InteractivityChecker,\n    providedIn: \"root\"\n  });\n  return InteractivityChecker;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  InteractivityChecker.prototype._platform;\n}\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch (_a) {\n    return null;\n  }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isNativeFormElement(element) {\n  /** @type {?} */\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  /** @type {?} */\n\n\n  let tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n\n  /** @type {?} */\n\n\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  /** @type {?} */\n  let nodeName = element.nodeName.toLowerCase();\n  /** @type {?} */\n\n  let inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/focus-trap/focus-trap.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * \\@breaking-change for 11.0.0 Remove this class.\n */\n\n\nclass FocusTrap {\n  /**\n   * @param {?} _element\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?=} deferAnchors\n   */\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n\n    this.startAnchorListener =\n    /**\n    * @return {?}\n    */\n    () => this.focusLastTabbableElement();\n\n    this.endAnchorListener =\n    /**\n    * @return {?}\n    */\n    () => this.focusFirstTabbableElement();\n\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /**\n   * Destroys the focus trap by cleaning up the anchors.\n   * @return {?}\n   */\n\n\n  destroy() {\n    /** @type {?} */\n    const startAnchor = this._startAnchor;\n    /** @type {?} */\n\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n\n      if (startAnchor.parentNode) {\n        startAnchor.parentNode.removeChild(startAnchor);\n      }\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n\n      if (endAnchor.parentNode) {\n        endAnchor.parentNode.removeChild(endAnchor);\n      }\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n\n\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n\n        this._startAnchor.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n\n        this._endAnchor.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n\n\n  focusInitialElementWhenReady() {\n    return new Promise(\n    /**\n    * @param {?} resolve\n    * @return {?}\n    */\n    resolve => {\n      this._executeOnStable(\n      /**\n      * @return {?}\n      */\n      () => resolve(this.focusInitialElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n\n\n  focusFirstTabbableElementWhenReady() {\n    return new Promise(\n    /**\n    * @param {?} resolve\n    * @return {?}\n    */\n    resolve => {\n      this._executeOnStable(\n      /**\n      * @return {?}\n      */\n      () => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n\n\n  focusLastTabbableElementWhenReady() {\n    return new Promise(\n    /**\n    * @param {?} resolve\n    * @return {?}\n    */\n    resolve => {\n      this._executeOnStable(\n      /**\n      * @return {?}\n      */\n      () => resolve(this.focusLastTabbableElement()));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @private\n   * @param {?} bound The boundary to get (start or end of trapped region).\n   * @return {?} The boundary element.\n   */\n\n\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n\n    /** @type {?} */\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @return {?} Whether focus was moved successfuly.\n   */\n\n\n  focusInitialElement() {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n\n    /** @type {?} */\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      } // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n\n\n      if (isDevMode() && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @return {?} Whether focus was moved successfuly.\n   */\n\n\n  focusFirstTabbableElement() {\n    /** @type {?} */\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @return {?} Whether focus was moved successfuly.\n   */\n\n\n  focusLastTabbableElement() {\n    /** @type {?} */\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfuly been attached.\n   * @return {?}\n   */\n\n\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /**\n   * Get the first tabbable element from a DOM subtree (inclusive).\n   * @private\n   * @param {?} root\n   * @return {?}\n   */\n\n\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n\n    /** @type {?} */\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      /** @type {?} */\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Get the last tabbable element from a DOM subtree (inclusive).\n   * @private\n   * @param {?} root\n   * @return {?}\n   */\n\n\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in reverse DOM order.\n\n    /** @type {?} */\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      /** @type {?} */\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Creates an anchor element.\n   * @private\n   * @return {?}\n   */\n\n\n  _createAnchor() {\n    /** @type {?} */\n    const anchor = this._document.createElement('div');\n\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @private\n   * @param {?} isEnabled Whether the focus trap is enabled.\n   * @param {?} anchor Anchor on which to toggle the tabindex.\n   * @return {?}\n   */\n\n\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @protected\n   * @param {?} enabled\n   * @return {?}\n   */\n\n\n  toggleAnchors(enabled) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n  /**\n   * Executes a function when the zone is stable.\n   * @private\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n    }\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  FocusTrap.prototype._startAnchor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  FocusTrap.prototype._endAnchor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  FocusTrap.prototype._hasAttached;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FocusTrap.prototype.startAnchorListener;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FocusTrap.prototype.endAnchorListener;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FocusTrap.prototype._enabled;\n  /** @type {?} */\n\n  FocusTrap.prototype._element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  FocusTrap.prototype._checker;\n  /** @type {?} */\n\n  FocusTrap.prototype._ngZone;\n  /** @type {?} */\n\n  FocusTrap.prototype._document;\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * \\@breaking-change for 11.0.0 Remove this class.\n */\n\n\nlet FocusTrapFactory = /*#__PURE__*/(() => {\n  class FocusTrapFactory {\n    /**\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_checker, _ngZone, _document) {\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param {?} element The element around which focus will be trapped.\n     * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @return {?} The created focus trap instance.\n     */\n\n\n    create(element, deferCaptureElements = false) {\n      return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n\n  }\n\n  FocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n    return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  FocusTrapFactory.ɵprov = ɵɵdefineInjectable({\n    factory: function FocusTrapFactory_Factory() {\n      return new FocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(DOCUMENT));\n    },\n    token: FocusTrapFactory,\n    providedIn: \"root\"\n  });\n  return FocusTrapFactory;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  FocusTrapFactory.prototype._document;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  FocusTrapFactory.prototype._checker;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  FocusTrapFactory.prototype._ngZone;\n}\n/**\n * Directive for trapping focus within a region.\n */\n\n\nlet CdkTrapFocus = /*#__PURE__*/(() => {\n  class CdkTrapFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _document\n     */\n    constructor(_elementRef, _focusTrapFactory, _document) {\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      /**\n       * Previously focused element to restore focus to upon destroy when using autoCapture.\n       */\n\n      this._previouslyFocusedElement = null;\n      this._document = _document;\n      this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n\n\n    get enabled() {\n      return this.focusTrap.enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set enabled(value) {\n      this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatially move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     * @return {?}\n     */\n\n\n    get autoCapture() {\n      return this._autoCapture;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set autoCapture(value) {\n      this._autoCapture = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n      // element now that the trapped region is being destroyed.\n\n      if (this._previouslyFocusedElement) {\n        this._previouslyFocusedElement.focus();\n\n        this._previouslyFocusedElement = null;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this.focusTrap.attachAnchors();\n\n      if (this.autoCapture) {\n        this._previouslyFocusedElement = this._document.activeElement;\n        this.focusTrap.focusInitialElementWhenReady();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngDoCheck() {\n      if (!this.focusTrap.hasAttached()) {\n        this.focusTrap.attachAnchors();\n      }\n    }\n\n  }\n\n  CdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n    return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  CdkTrapFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTrapFocus,\n    selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n    inputs: {\n      enabled: [\"cdkTrapFocus\", \"enabled\"],\n      autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n    },\n    exportAs: [\"cdkTrapFocus\"]\n  });\n  /** @nocollapse */\n\n  return CdkTrapFocus;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  CdkTrapFocus.ngAcceptInputType_enabled;\n  /** @type {?} */\n\n  CdkTrapFocus.ngAcceptInputType_autoCapture;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTrapFocus.prototype._document;\n  /**\n   * Underlying FocusTrap instance.\n   * @type {?}\n   */\n\n  CdkTrapFocus.prototype.focusTrap;\n  /**\n   * Previously focused element to restore focus to upon destroy when using autoCapture.\n   * @type {?}\n   * @private\n   */\n\n  CdkTrapFocus.prototype._previouslyFocusedElement;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTrapFocus.prototype._autoCapture;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTrapFocus.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkTrapFocus.prototype._focusTrapFactory;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/focus-trap/configurable-focus-trap.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\n\n\nclass ConfigurableFocusTrap extends FocusTrap {\n  /**\n   * @param {?} _element\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?} _focusTrapManager\n   * @param {?} _inertStrategy\n   * @param {?} config\n   */\n  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager = _focusTrapManager;\n    this._inertStrategy = _inertStrategy;\n\n    this._focusTrapManager.register(this);\n  }\n  /**\n   * Whether the FocusTrap is enabled.\n   * @return {?}\n   */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n  /**\n   * Notifies the FocusTrapManager that this FocusTrap will be destroyed.\n   * @return {?}\n   */\n\n\n  destroy() {\n    this._focusTrapManager.deregister(this);\n\n    super.destroy();\n  }\n  /**\n   * \\@docs-private Implemented as part of ManagedFocusTrap.\n   * @return {?}\n   */\n\n\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n\n    this.toggleAnchors(true);\n  }\n  /**\n   * \\@docs-private Implemented as part of ManagedFocusTrap.\n   * @return {?}\n   */\n\n\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n\n    this.toggleAnchors(false);\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ConfigurableFocusTrap.prototype._focusTrapManager;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ConfigurableFocusTrap.prototype._inertStrategy;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/focus-trap/polyfill.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * IE 11 compatible closest implementation that is able to start from non-Element Nodes.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\n\n\nfunction closest(element, selector) {\n  if (!(element instanceof Node)) {\n    return null;\n  }\n  /** @type {?} */\n\n\n  let curr = element;\n\n  while (curr != null && !(curr instanceof Element)) {\n    curr = curr.parentNode;\n  }\n\n  return curr && (hasNativeClosest ? curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/**\n * Polyfill for browsers without Element.closest.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\n\n\nfunction polyfillClosest(element, selector) {\n  /** @type {?} */\n  let curr = element;\n\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n    curr = curr.parentNode;\n  }\n\n  return curr || null;\n}\n/** @type {?} */\n\n\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/**\n * IE 11 compatible matches implementation.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\n\nfunction matches(element, selector) {\n  return element.matches ? element.matches(selector) : element['msMatchesSelector'](selector);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/focus-trap/event-listener-inert-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\n\n\nclass EventListenerFocusTrapInertStrategy {\n  constructor() {\n    /**\n     * Focus event handler.\n     */\n    this._listener = null;\n  }\n  /**\n   * Adds a document event listener that keeps focus inside the FocusTrap.\n   * @param {?} focusTrap\n   * @return {?}\n   */\n\n\n  preventFocus(focusTrap) {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n    }\n\n    this._listener =\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => this._trapFocus(focusTrap, e);\n\n    focusTrap._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      focusTrap._document.addEventListener('focus', this._listener, true);\n    });\n  }\n  /**\n   * Removes the event listener added in preventFocus.\n   * @param {?} focusTrap\n   * @return {?}\n   */\n\n\n  allowFocus(focusTrap) {\n    if (!this._listener) {\n      return;\n    }\n\n    focusTrap._document.removeEventListener('focus', this._listener, true);\n\n    this._listener = null;\n  }\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   * @private\n   * @param {?} focusTrap\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _trapFocus(focusTrap, event) {\n    /** @type {?} */\n    const target = event.target;\n    /** @type {?} */\n\n    const focusTrapRoot = focusTrap._element; // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n\n    if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n\n}\n\nif (false) {\n  /**\n   * Focus event handler.\n   * @type {?}\n   * @private\n   */\n  EventListenerFocusTrapInertStrategy.prototype._listener;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/focus-trap/configurable-focus-trap-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for creating a ConfigurableFocusTrap.\n */\n\n\nclass ConfigurableFocusTrapConfig {\n  constructor() {\n    /**\n     * Whether to defer the creation of FocusTrap elements to be\n     * done manually by the user. Default is to create them\n     * automatically.\n     */\n    this.defer = false;\n  }\n\n}\n\nif (false) {\n  /**\n   * Whether to defer the creation of FocusTrap elements to be\n   * done manually by the user. Default is to create them\n   * automatically.\n   * @type {?}\n   */\n  ConfigurableFocusTrapConfig.prototype.defer;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/focus-trap/focus-trap-inert-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The injection token used to specify the inert strategy.\n * @type {?}\n */\n\n\nconst FOCUS_TRAP_INERT_STRATEGY = /*#__PURE__*/new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n/**\n * A strategy that dictates how FocusTrap should prevent elements\n * outside of the FocusTrap from being focused.\n * @record\n */\n\nfunction FocusTrapInertStrategy() {}\n\nif (false) {\n  /**\n   * Makes all elements outside focusTrap unfocusable.\n   * @param {?} focusTrap\n   * @return {?}\n   */\n  FocusTrapInertStrategy.prototype.preventFocus = function (focusTrap) {};\n  /**\n   * Reverts elements made unfocusable by preventFocus to their previous state.\n   * @param {?} focusTrap\n   * @return {?}\n   */\n\n\n  FocusTrapInertStrategy.prototype.allowFocus = function (focusTrap) {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/focus-trap/focus-trap-manager.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A FocusTrap managed by FocusTrapManager.\n * Implemented by ConfigurableFocusTrap to avoid circular dependency.\n * @record\n */\n\n\nfunction ManagedFocusTrap() {}\n\nif (false) {\n  /**\n   * @return {?}\n   */\n  ManagedFocusTrap.prototype._enable = function () {};\n  /**\n   * @return {?}\n   */\n\n\n  ManagedFocusTrap.prototype._disable = function () {};\n  /**\n   * @return {?}\n   */\n\n\n  ManagedFocusTrap.prototype.focusInitialElementWhenReady = function () {};\n}\n/**\n * Injectable that ensures only the most recently enabled FocusTrap is active.\n */\n\n\nlet FocusTrapManager = /*#__PURE__*/(() => {\n  class FocusTrapManager {\n    constructor() {\n      // A stack of the FocusTraps on the page. Only the FocusTrap at the\n      // top of the stack is active.\n      this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     * @param {?} focusTrap\n     * @return {?}\n     */\n\n\n    register(focusTrap) {\n      // Dedupe focusTraps that register multiple times.\n      this._focusTrapStack = this._focusTrapStack.filter(\n      /**\n      * @param {?} ft\n      * @return {?}\n      */\n      ft => ft !== focusTrap);\n      /** @type {?} */\n\n      let stack = this._focusTrapStack;\n\n      if (stack.length) {\n        stack[stack.length - 1]._disable();\n      }\n\n      stack.push(focusTrap);\n\n      focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     * @param {?} focusTrap\n     * @return {?}\n     */\n\n\n    deregister(focusTrap) {\n      focusTrap._disable();\n      /** @type {?} */\n\n\n      const stack = this._focusTrapStack;\n      /** @type {?} */\n\n      const i = stack.indexOf(focusTrap);\n\n      if (i !== -1) {\n        stack.splice(i, 1);\n\n        if (stack.length) {\n          stack[stack.length - 1]._enable();\n        }\n      }\n    }\n\n  }\n\n  FocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {\n    return new (t || FocusTrapManager)();\n  };\n  /** @nocollapse */\n\n\n  FocusTrapManager.ɵprov = ɵɵdefineInjectable({\n    factory: function FocusTrapManager_Factory() {\n      return new FocusTrapManager();\n    },\n    token: FocusTrapManager,\n    providedIn: \"root\"\n  });\n  return FocusTrapManager;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  FocusTrapManager.prototype._focusTrapStack;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/focus-trap/configurable-focus-trap-factory.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Factory that allows easy instantiation of configurable focus traps.\n */\n\n\nlet ConfigurableFocusTrapFactory = /*#__PURE__*/(() => {\n  class ConfigurableFocusTrapFactory {\n    /**\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _focusTrapManager\n     * @param {?} _document\n     * @param {?=} _inertStrategy\n     */\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._focusTrapManager = _focusTrapManager;\n      this._document = _document; // TODO split up the strategies into different modules, similar to DateAdapter.\n\n      this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    /**\n     * @param {?} element\n     * @param {?=} config\n     * @return {?}\n     */\n\n\n    create(element, config = new ConfigurableFocusTrapConfig()) {\n      /** @type {?} */\n      let configObject;\n\n      if (typeof config === 'boolean') {\n        configObject = new ConfigurableFocusTrapConfig();\n        configObject.defer = config;\n      } else {\n        configObject = config;\n      }\n\n      return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n\n  }\n\n  ConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {\n    return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  ConfigurableFocusTrapFactory.ɵprov = ɵɵdefineInjectable({\n    factory: function ConfigurableFocusTrapFactory_Factory() {\n      return new ConfigurableFocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(FocusTrapManager), ɵɵinject(DOCUMENT), ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n    },\n    token: ConfigurableFocusTrapFactory,\n    providedIn: \"root\"\n  });\n  return ConfigurableFocusTrapFactory;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ConfigurableFocusTrapFactory.prototype._document;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ConfigurableFocusTrapFactory.prototype._inertStrategy;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ConfigurableFocusTrapFactory.prototype._checker;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ConfigurableFocusTrapFactory.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ConfigurableFocusTrapFactory.prototype._focusTrapManager;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/live-announcer/live-announcer-tokens.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = /*#__PURE__*/new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/**\n * Object that can be used to configure the default options for the LiveAnnouncer.\n * @record\n */\n\n\nfunction LiveAnnouncerDefaultOptions() {}\n\nif (false) {\n  /**\n   * Default politeness for the announcements.\n   * @type {?|undefined}\n   */\n  LiveAnnouncerDefaultOptions.prototype.politeness;\n  /**\n   * Default duration for the announcement messages.\n   * @type {?|undefined}\n   */\n\n  LiveAnnouncerDefaultOptions.prototype.duration;\n}\n/**\n * Injection token that can be used to configure the default options for the LiveAnnouncer.\n * @type {?}\n */\n\n\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/live-announcer/live-announcer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nlet LiveAnnouncer = /*#__PURE__*/(() => {\n  class LiveAnnouncer {\n    /**\n     * @param {?} elementToken\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?=} _defaultOptions\n     */\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n      this._ngZone = _ngZone;\n      this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot\n      // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n      // a class decorator causes TypeScript to preserve the constructor signature types.\n\n      this._document = _document;\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n    /**\n     * @param {?} message\n     * @param {...?} args\n     * @return {?}\n     */\n\n\n    announce(message, ...args) {\n      /** @type {?} */\n      const defaultOptions = this._defaultOptions;\n      /** @type {?} */\n\n      let politeness;\n      /** @type {?} */\n\n      let duration;\n\n      if (args.length === 1 && typeof args[0] === 'number') {\n        duration = args[0];\n      } else {\n        [politeness, duration] = args;\n      }\n\n      this.clear();\n      clearTimeout(this._previousTimeout);\n\n      if (!politeness) {\n        politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n      }\n\n      if (duration == null && defaultOptions) {\n        duration = defaultOptions.duration;\n      } // TODO: ensure changing the politeness works on all environments we support.\n\n\n      this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n      // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n      // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n      //   second time without clearing and then using a non-zero delay.\n      // (using JAWS 17 at time of this writing).\n\n\n      return this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @return {?}\n        */\n        resolve => {\n          clearTimeout(this._previousTimeout);\n          this._previousTimeout = setTimeout(\n          /**\n          * @return {?}\n          */\n          () => {\n            this._liveElement.textContent = message;\n            resolve();\n\n            if (typeof duration === 'number') {\n              this._previousTimeout = setTimeout(\n              /**\n              * @return {?}\n              */\n              () => this.clear(), duration);\n            }\n          }, 100);\n        });\n      });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     * @return {?}\n     */\n\n\n    clear() {\n      if (this._liveElement) {\n        this._liveElement.textContent = '';\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      clearTimeout(this._previousTimeout);\n\n      if (this._liveElement && this._liveElement.parentNode) {\n        this._liveElement.parentNode.removeChild(this._liveElement);\n\n        this._liveElement = null;\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _createLiveElement() {\n      /** @type {?} */\n      const elementClass = 'cdk-live-announcer-element';\n      /** @type {?} */\n\n      const previousElements = this._document.getElementsByClassName(elementClass);\n      /** @type {?} */\n\n\n      const liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n      for (let i = 0; i < previousElements.length; i++) {\n        previousElements[i].parentNode.removeChild(previousElements[i]);\n      }\n\n      liveEl.classList.add(elementClass);\n      liveEl.classList.add('cdk-visually-hidden');\n      liveEl.setAttribute('aria-atomic', 'true');\n      liveEl.setAttribute('aria-live', 'polite');\n\n      this._document.body.appendChild(liveEl);\n\n      return liveEl;\n    }\n\n  }\n\n  LiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n    return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  LiveAnnouncer.ɵprov = ɵɵdefineInjectable({\n    factory: function LiveAnnouncer_Factory() {\n      return new LiveAnnouncer(ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n    },\n    token: LiveAnnouncer,\n    providedIn: \"root\"\n  });\n  return LiveAnnouncer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  LiveAnnouncer.prototype._liveElement;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  LiveAnnouncer.prototype._document;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  LiveAnnouncer.prototype._previousTimeout;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  LiveAnnouncer.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  LiveAnnouncer.prototype._defaultOptions;\n}\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n\n\nlet CdkAriaLive = /*#__PURE__*/(() => {\n  class CdkAriaLive {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _liveAnnouncer\n     * @param {?} _contentObserver\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n      this._elementRef = _elementRef;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._contentObserver = _contentObserver;\n      this._ngZone = _ngZone;\n      this._politeness = 'off';\n    }\n    /**\n     * The aria-live politeness level to use when announcing messages.\n     * @return {?}\n     */\n\n\n    get politeness() {\n      return this._politeness;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set politeness(value) {\n      this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n\n      if (this._politeness === 'off') {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n\n          this._subscription = null;\n        }\n      } else if (!this._subscription) {\n        this._subscription = this._ngZone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        () => {\n          return this._contentObserver.observe(this._elementRef).subscribe(\n          /**\n          * @return {?}\n          */\n          () => {\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n\n            /** @type {?} */\n            const elementText = this._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute\n            // changes which we don't want to announce.\n\n            if (elementText !== this._previousAnnouncedText) {\n              this._liveAnnouncer.announce(elementText, this._politeness);\n\n              this._previousAnnouncedText = elementText;\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n      }\n    }\n\n  }\n\n  CdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n    return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkAriaLive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkAriaLive,\n    selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n    inputs: {\n      politeness: [\"cdkAriaLive\", \"politeness\"]\n    },\n    exportAs: [\"cdkAriaLive\"]\n  });\n  /** @nocollapse */\n\n  return CdkAriaLive;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  CdkAriaLive.prototype._politeness;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAriaLive.prototype._previousAnnouncedText;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAriaLive.prototype._subscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAriaLive.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAriaLive.prototype._liveAnnouncer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAriaLive.prototype._contentObserver;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAriaLive.prototype._ngZone;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/fake-mousedown.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\n\n\nfunction isFakeMousedownFromScreenReader(event) {\n  return event.buttons === 0;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/focus-monitor/focus-monitor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\n\n/** @type {?} */\n\n\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Corresponds to the options that can be passed to the native `focus` event.\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n * @record\n */\n\nfunction FocusOptions() {}\n\nif (false) {\n  /**\n   * Whether the browser should scroll to the element when it is focused.\n   * @type {?|undefined}\n   */\n  FocusOptions.prototype.preventScroll;\n}\n/** @enum {number} */\n\n\nconst FocusMonitorDetectionMode = {\n  /**\n   * Any mousedown, keydown, or touchstart event that happened in the previous\n   * tick or the current tick will be used to assign a focus event's origin (to\n   * either mouse, keyboard, or touch). This is the default option.\n   */\n  IMMEDIATE: 0,\n\n  /**\n   * A focus event's origin is always attributed to the last corresponding\n   * mousedown, keydown, or touchstart event, no matter how long ago it occured.\n   */\n  EVENTUAL: 1\n};\n/**\n * Injectable service-level options for FocusMonitor.\n * @record\n */\n\nfunction FocusMonitorOptions() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  FocusMonitorOptions.prototype.detectionMode;\n}\n/**\n * InjectionToken for FocusMonitorOptions.\n * @type {?}\n */\n\n\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n * @type {?}\n */\n\nconst captureEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\n\nlet FocusMonitor = /*#__PURE__*/(() => {\n  class FocusMonitor {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?} document\n     * @param {?} options\n     */\n    constructor(_ngZone, _platform,\n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      /**\n       * The focus origin that the next focus event is a result of.\n       */\n\n      this._origin = null;\n      /**\n       * Whether the window has just been focused.\n       */\n\n      this._windowFocused = false;\n      /**\n       * Map of elements being monitored to their info.\n       */\n\n      this._elementInfo = new Map();\n      /**\n       * The number of elements currently being monitored.\n       */\n\n      this._monitoredElementCount = 0;\n      /**\n       * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n       * as well as the number of monitored elements that they contain. We have to treat focus/blur\n       * handlers differently from the rest of the events, because the browser won't emit events\n       * to the document when focus moves inside of a shadow root.\n       */\n\n      this._rootNodeFocusListenerCount = new Map();\n      /**\n       * Event listener for `keydown` events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n      this._documentKeydownListener =\n      /**\n      * @return {?}\n      */\n      () => {\n        // On keydown record the origin and clear any touch event that may be in progress.\n        this._lastTouchTarget = null;\n\n        this._setOriginForCurrentEventQueue('keyboard');\n      };\n      /**\n       * Event listener for `mousedown` events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n\n      this._documentMousedownListener =\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        // On mousedown record the origin only if there is not touch\n        // target, since a mousedown can happen as a result of a touch event.\n        if (!this._lastTouchTarget) {\n          // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\n          // Resolve the focus source to `keyboard` if we detect one of them.\n\n          /** @type {?} */\n          const source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\n\n          this._setOriginForCurrentEventQueue(source);\n        }\n      };\n      /**\n       * Event listener for `touchstart` events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n\n      this._documentTouchstartListener =\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n        // see if a focus happens.\n        if (this._touchTimeoutId != null) {\n          clearTimeout(this._touchTimeoutId);\n        }\n\n        this._lastTouchTarget = getTarget(event);\n        this._touchTimeoutId = setTimeout(\n        /**\n        * @return {?}\n        */\n        () => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n      };\n      /**\n       * Event listener for `focus` events on the window.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n\n      this._windowFocusListener =\n      /**\n      * @return {?}\n      */\n      () => {\n        // Make a note of when the window regains focus, so we can\n        // restore the origin info for the focused element.\n        this._windowFocused = true;\n        this._windowFocusTimeoutId = setTimeout(\n        /**\n        * @return {?}\n        */\n        () => this._windowFocused = false);\n      };\n      /**\n       * Event listener for `focus` and 'blur' events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n\n      this._rootNodeFocusAndBlurListener =\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        /** @type {?} */\n        const target = getTarget(event);\n        /** @type {?} */\n\n        const handler = event.type === 'focus' ? this._onFocus : this._onBlur; // We need to walk up the ancestor chain in order to support `checkChildren`.\n\n        for (let element = target; element; element = element.parentElement) {\n          handler.call(this, event, element);\n        }\n      };\n\n      this._document = document;\n      this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0\n      /* IMMEDIATE */\n      ;\n    }\n    /**\n     * @param {?} element\n     * @param {?=} checkChildren\n     * @return {?}\n     */\n\n\n    monitor(element, checkChildren = false) {\n      // Do nothing if we're not on the browser platform.\n      if (!this._platform.isBrowser) {\n        return of(null);\n      }\n      /** @type {?} */\n\n\n      const nativeElement = coerceElement(element); // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n      // the shadow root, rather than the `document`, because the browser won't emit focus events\n      // to the `document`, if focus is moving within the same shadow root.\n\n      /** @type {?} */\n\n      const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n      /** @type {?} */\n\n\n      const cachedInfo = this._elementInfo.get(nativeElement); // Check if we're already monitoring this element.\n\n\n      if (cachedInfo) {\n        if (checkChildren) {\n          // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n          // observers into ones that behave as if `checkChildren` was turned on. We need a more\n          // robust solution.\n          cachedInfo.checkChildren = true;\n        }\n\n        return cachedInfo.subject.asObservable();\n      } // Create monitored element info.\n\n      /** @type {?} */\n\n\n      const info = {\n        checkChildren: checkChildren,\n        subject: new Subject(),\n        rootNode\n      };\n\n      this._elementInfo.set(nativeElement, info);\n\n      this._registerGlobalListeners(info);\n\n      return info.subject.asObservable();\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n\n\n    stopMonitoring(element) {\n      /** @type {?} */\n      const nativeElement = coerceElement(element);\n      /** @type {?} */\n\n      const elementInfo = this._elementInfo.get(nativeElement);\n\n      if (elementInfo) {\n        elementInfo.subject.complete();\n\n        this._setClasses(nativeElement);\n\n        this._elementInfo.delete(nativeElement);\n\n        this._removeGlobalListeners(elementInfo);\n      }\n    }\n    /**\n     * @param {?} element\n     * @param {?} origin\n     * @param {?=} options\n     * @return {?}\n     */\n\n\n    focusVia(element, origin, options) {\n      /** @type {?} */\n      const nativeElement = coerceElement(element);\n\n      this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server\n\n\n      if (typeof nativeElement.focus === 'function') {\n        // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n        nativeElement.focus(options);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._elementInfo.forEach(\n      /**\n      * @param {?} _info\n      * @param {?} element\n      * @return {?}\n      */\n      (_info, element) => this.stopMonitoring(element));\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n\n\n    _getDocument() {\n      return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n\n\n    _getWindow() {\n      /** @type {?} */\n      const doc = this._getDocument();\n\n      return doc.defaultView || window;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} className\n     * @param {?} shouldSet\n     * @return {?}\n     */\n\n\n    _toggleClass(element, className, shouldSet) {\n      if (shouldSet) {\n        element.classList.add(className);\n      } else {\n        element.classList.remove(className);\n      }\n    }\n    /**\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _getFocusOrigin(event) {\n      // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n      // 1) The window has just regained focus, in which case we want to restore the focused state of\n      //    the element from before the window blurred.\n      // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n      // 3) The element was programmatically focused, in which case we should mark the origin as\n      //    'program'.\n      if (this._origin) {\n        return this._origin;\n      }\n\n      if (this._windowFocused && this._lastFocusOrigin) {\n        return this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        return 'touch';\n      } else {\n        return 'program';\n      }\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @private\n     * @param {?} element The element to update the classes on.\n     * @param {?=} origin The focus origin.\n     * @return {?}\n     */\n\n\n    _setClasses(element, origin) {\n      this._toggleClass(element, 'cdk-focused', !!origin);\n\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * If the detection mode is 'eventual', the origin is never cleared.\n     * @private\n     * @param {?} origin The origin to set.\n     * @return {?}\n     */\n\n\n    _setOriginForCurrentEventQueue(origin) {\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._origin = origin;\n\n        if (this._detectionMode === 0\n        /* IMMEDIATE */\n        ) {\n          // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n          // tick after the interaction event fired. To ensure the focus origin is always correct,\n          // the focus origin will be determined at the beginning of the next tick.\n          this._originTimeoutId = setTimeout(\n          /**\n          * @return {?}\n          */\n          () => this._origin = null, 1);\n        }\n      });\n    }\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @private\n     * @param {?} event The focus event to check.\n     * @return {?} Whether the event was caused by a touch.\n     */\n\n\n    _wasCausedByTouch(event) {\n      // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n      // Consider the following dom structure:\n      //\n      // <div #parent tabindex=\"0\" cdkFocusClasses>\n      //   <div #child (click)=\"#parent.focus()\"></div>\n      // </div>\n      //\n      // If the user touches the #child element and the #parent is programmatically focused as a\n      // result, this code will still consider it to have been caused by the touch event and will\n      // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n      // relatively small edge-case that can be worked around by using\n      // focusVia(parentEl, 'program') to focus the parent element.\n      //\n      // If we decide that we absolutely must handle this case correctly, we can do so by listening\n      // for the first focus event after the touchstart, and then the first blur event after that\n      // focus event. When that blur event fires we know that whatever follows is not a result of the\n      // touchstart.\n\n      /** @type {?} */\n      const focusTarget = getTarget(event);\n      return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @private\n     * @param {?} event The focus event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n\n\n    _onFocus(event, element) {\n      // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n      // focus event affecting the monitored element. If we want to use the origin of the first event\n      // instead we should check for the cdk-focused class here and return if the element already has\n      // it. (This only matters for elements that have includesChildren = true).\n      // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n      // focus event affecting the monitored element. If we want to use the origin of the first event\n      // instead we should check for the cdk-focused class here and return if the element already has\n      // it. (This only matters for elements that have includesChildren = true).\n      // If we are not counting child-element-focus as focused, make sure that the event target is the\n      // monitored element itself.\n\n      /** @type {?} */\n      const elementInfo = this._elementInfo.get(element);\n\n      if (!elementInfo || !elementInfo.checkChildren && element !== getTarget(event)) {\n        return;\n      }\n      /** @type {?} */\n\n\n      const origin = this._getFocusOrigin(event);\n\n      this._setClasses(element, origin);\n\n      this._emitOrigin(elementInfo.subject, origin);\n\n      this._lastFocusOrigin = origin;\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param {?} event The blur event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n\n\n    _onBlur(event, element) {\n      // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n      // order to focus another child of the monitored element.\n\n      /** @type {?} */\n      const elementInfo = this._elementInfo.get(element);\n\n      if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n        return;\n      }\n\n      this._setClasses(element);\n\n      this._emitOrigin(elementInfo.subject, null);\n    }\n    /**\n     * @private\n     * @param {?} subject\n     * @param {?} origin\n     * @return {?}\n     */\n\n\n    _emitOrigin(subject, origin) {\n      this._ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => subject.next(origin));\n    }\n    /**\n     * @private\n     * @param {?} elementInfo\n     * @return {?}\n     */\n\n\n    _registerGlobalListeners(elementInfo) {\n      if (!this._platform.isBrowser) {\n        return;\n      }\n      /** @type {?} */\n\n\n      const rootNode = elementInfo.rootNode;\n      /** @type {?} */\n\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n      if (!rootNodeFocusListeners) {\n        this._ngZone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        () => {\n          rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        });\n      }\n\n      this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1); // Register global listeners when first element is monitored.\n\n\n      if (++this._monitoredElementCount === 1) {\n        // Note: we listen to events in the capture phase so we\n        // can detect them even if the user stops propagation.\n        this._ngZone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        () => {\n          /** @type {?} */\n          const document = this._getDocument();\n          /** @type {?} */\n\n\n          const window = this._getWindow();\n\n          document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n          document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n          document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n          window.addEventListener('focus', this._windowFocusListener);\n        });\n      }\n    }\n    /**\n     * @private\n     * @param {?} elementInfo\n     * @return {?}\n     */\n\n\n    _removeGlobalListeners(elementInfo) {\n      /** @type {?} */\n      const rootNode = elementInfo.rootNode;\n\n      if (this._rootNodeFocusListenerCount.has(rootNode)) {\n        /** @type {?} */\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n\n        if (rootNodeFocusListeners > 1) {\n          this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n        } else {\n          rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n\n          this._rootNodeFocusListenerCount.delete(rootNode);\n        }\n      } // Unregister global listeners when last element is unmonitored.\n\n\n      if (! --this._monitoredElementCount) {\n        /** @type {?} */\n        const document = this._getDocument();\n        /** @type {?} */\n\n\n        const window = this._getWindow();\n\n        document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n        document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n        document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n        window.removeEventListener('focus', this._windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n        clearTimeout(this._windowFocusTimeoutId);\n        clearTimeout(this._touchTimeoutId);\n        clearTimeout(this._originTimeoutId);\n      }\n    }\n\n  }\n\n  FocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n    return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  FocusMonitor.ɵprov = ɵɵdefineInjectable({\n    factory: function FocusMonitor_Factory() {\n      return new FocusMonitor(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8), ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n    },\n    token: FocusMonitor,\n    providedIn: \"root\"\n  });\n  return FocusMonitor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * The focus origin that the next focus event is a result of.\n   * @type {?}\n   * @private\n   */\n  FocusMonitor.prototype._origin;\n  /**\n   * The FocusOrigin of the last focus event tracked by the FocusMonitor.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._lastFocusOrigin;\n  /**\n   * Whether the window has just been focused.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._windowFocused;\n  /**\n   * The target of the last touch event.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._lastTouchTarget;\n  /**\n   * The timeout id of the touch timeout, used to cancel timeout later.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._touchTimeoutId;\n  /**\n   * The timeout id of the window focus timeout.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._windowFocusTimeoutId;\n  /**\n   * The timeout id of the origin clearing timeout.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._originTimeoutId;\n  /**\n   * Map of elements being monitored to their info.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._elementInfo;\n  /**\n   * The number of elements currently being monitored.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._monitoredElementCount;\n  /**\n   * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n   * as well as the number of monitored elements that they contain. We have to treat focus/blur\n   * handlers differently from the rest of the events, because the browser won't emit events\n   * to the document when focus moves inside of a shadow root.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._rootNodeFocusListenerCount;\n  /**\n   * The specified detection mode, used for attributing the origin of a focus\n   * event.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._detectionMode;\n  /**\n   * Event listener for `keydown` events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._documentKeydownListener;\n  /**\n   * Event listener for `mousedown` events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._documentMousedownListener;\n  /**\n   * Event listener for `touchstart` events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._documentTouchstartListener;\n  /**\n   * Event listener for `focus` events on the window.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._windowFocusListener;\n  /**\n   * Used to reference correct document/window\n   * @type {?}\n   * @protected\n   */\n\n  FocusMonitor.prototype._document;\n  /**\n   * Event listener for `focus` and 'blur' events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._rootNodeFocusAndBlurListener;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  FocusMonitor.prototype._platform;\n}\n/**\n * Gets the target of an event, accounting for Shadow DOM.\n * @param {?} event\n * @return {?}\n */\n\n\nfunction getTarget(event) {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return event.composedPath ? event.composedPath()[0] : event.target;\n}\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n\n\nlet CdkMonitorFocus = /*#__PURE__*/(() => {\n  class CdkMonitorFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     */\n    constructor(_elementRef, _focusMonitor) {\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this.cdkFocusChange = new EventEmitter();\n      this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(\n      /**\n      * @param {?} origin\n      * @return {?}\n      */\n      origin => this.cdkFocusChange.emit(origin));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._monitorSubscription.unsubscribe();\n    }\n\n  }\n\n  CdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n    return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n  };\n\n  CdkMonitorFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkMonitorFocus,\n    selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n    outputs: {\n      cdkFocusChange: \"cdkFocusChange\"\n    }\n  });\n  /** @nocollapse */\n\n  return CdkMonitorFocus;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  CdkMonitorFocus.prototype._monitorSubscription;\n  /** @type {?} */\n\n  CdkMonitorFocus.prototype.cdkFocusChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkMonitorFocus.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkMonitorFocus.prototype._focusMonitor;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/high-contrast-mode/high-contrast-mode-detector.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {number} */\n\n\nconst HighContrastMode = {\n  NONE: 0,\n  BLACK_ON_WHITE: 1,\n  WHITE_ON_BLACK: 2\n};\n/**\n * CSS class applied to the document body when in black-on-white high-contrast mode.\n * @type {?}\n */\n\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/**\n * CSS class applied to the document body when in white-on-black high-contrast mode.\n * @type {?}\n */\n\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/**\n * CSS class applied to the document body when in high-contrast mode.\n * @type {?}\n */\n\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n\nlet HighContrastModeDetector = /*#__PURE__*/(() => {\n  class HighContrastModeDetector {\n    /**\n     * @param {?} _platform\n     * @param {?} document\n     */\n    constructor(_platform, document) {\n      this._platform = _platform;\n      this._document = document;\n    }\n    /**\n     * Gets the current high-contrast-mode for the page.\n     * @return {?}\n     */\n\n\n    getHighContrastMode() {\n      if (!this._platform.isBrowser) {\n        return 0\n        /* NONE */\n        ;\n      } // Create a test element with an arbitrary background-color that is neither black nor\n      // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n      // appending the test element to the DOM does not affect layout by absolutely positioning it\n\n      /** @type {?} */\n\n\n      const testElement = this._document.createElement('div');\n\n      testElement.style.backgroundColor = 'rgb(1,2,3)';\n      testElement.style.position = 'absolute';\n\n      this._document.body.appendChild(testElement); // Get the computed style for the background color, collapsing spaces to normalize between\n      // browsers. Once we get this color, we no longer need the test element. Access the `window`\n      // via the document so we can fake it in tests. Note that we have extra null checks, because\n      // this logic will likely run during app bootstrap and throwing can break the entire app.\n\n      /** @type {?} */\n\n\n      const documentWindow = this._document.defaultView || window;\n      /** @type {?} */\n\n      const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n      /** @type {?} */\n\n      const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n\n      this._document.body.removeChild(testElement);\n\n      switch (computedColor) {\n        case 'rgb(0,0,0)':\n          return 2\n          /* WHITE_ON_BLACK */\n          ;\n\n        case 'rgb(255,255,255)':\n          return 1\n          /* BLACK_ON_WHITE */\n          ;\n      }\n\n      return 0\n      /* NONE */\n      ;\n    }\n    /**\n     * Applies CSS classes indicating high-contrast mode to document body (browser-only).\n     * @return {?}\n     */\n\n\n    _applyBodyHighContrastModeCssClasses() {\n      if (this._platform.isBrowser && this._document.body) {\n        /** @type {?} */\n        const bodyClasses = this._document.body.classList; // IE11 doesn't support `classList` operations with multiple arguments\n\n        bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n        bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n        /** @type {?} */\n\n        const mode = this.getHighContrastMode();\n\n        if (mode === 1\n        /* BLACK_ON_WHITE */\n        ) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n          bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n        } else if (mode === 2\n        /* WHITE_ON_BLACK */\n        ) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n          bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n        }\n      }\n    }\n\n  }\n\n  HighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {\n    return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  HighContrastModeDetector.ɵprov = ɵɵdefineInjectable({\n    factory: function HighContrastModeDetector_Factory() {\n      return new HighContrastModeDetector(ɵɵinject(Platform), ɵɵinject(DOCUMENT));\n    },\n    token: HighContrastModeDetector,\n    providedIn: \"root\"\n  });\n  return HighContrastModeDetector;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  HighContrastModeDetector.prototype._document;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  HighContrastModeDetector.prototype._platform;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/a11y-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet A11yModule = /*#__PURE__*/(() => {\n  class A11yModule {\n    /**\n     * @param {?} highContrastModeDetector\n     */\n    constructor(highContrastModeDetector) {\n      highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n\n  }\n\n  A11yModule.ɵfac = function A11yModule_Factory(t) {\n    return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector));\n  };\n\n  A11yModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: A11yModule\n  });\n  A11yModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[PlatformModule, ObserversModule]]\n  });\n  /** @nocollapse */\n\n  return A11yModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function () {\n      return [PlatformModule, ObserversModule];\n    },\n    exports: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/a11y/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, InteractivityChecker, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, TOUCH_BUFFER_MS, isFakeMousedownFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a, ConfigurableFocusTrapConfig as ɵangular_material_src_cdk_a11y_a11y_b }; //# sourceMappingURL=a11y.js.map","map":null,"metadata":{},"sourceType":"module"}