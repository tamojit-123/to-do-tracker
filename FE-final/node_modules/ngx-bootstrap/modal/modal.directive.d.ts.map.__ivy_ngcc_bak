{"version":3,"file":"modal.directive.d.ts","sources":["modal.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentRef, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2, ViewContainerRef } from '@angular/core';\nimport { ModalBackdropComponent } from './modal-backdrop.component';\nimport { ModalOptions } from './modal-options.class';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { CloseInterceptorFn } from './models';\n/** Mark any code with directive to show it's content in modal */\nexport declare class ModalDirective implements OnDestroy, OnInit {\n    private _element;\n    private _renderer;\n    /** allows to set modal configuration via element property */\n    set config(conf: ModalOptions);\n    get config(): ModalOptions;\n    /** allows to provide a callback to intercept the closure of the modal */\n    closeInterceptor?: CloseInterceptorFn;\n    /** This event fires immediately when the `show` instance method is called. */\n    onShow: EventEmitter<ModalDirective>;\n    /** This event is fired when the modal has been made visible to the user\n     * (will wait for CSS transitions to complete)\n     */\n    onShown: EventEmitter<ModalDirective>;\n    /** This event is fired immediately when\n     * the hide instance method has been called.\n     */\n    onHide: EventEmitter<ModalDirective>;\n    /** This event is fired when the modal has finished being\n     * hidden from the user (will wait for CSS transitions to complete).\n     */\n    onHidden: EventEmitter<ModalDirective>;\n    /** This field contains last dismiss reason.\n     * Possible values: `backdrop-click`, `esc` and `id: number`\n     * (if modal was closed by direct call of `.hide()`).\n     */\n    dismissReason?: string;\n    get isShown(): boolean;\n    protected _config: ModalOptions;\n    protected _isShown: boolean;\n    protected isBodyOverflowing: boolean;\n    protected originalBodyPadding: number;\n    protected scrollbarWidth: number;\n    protected timerHideModal: number;\n    protected timerRmBackDrop: number;\n    protected backdrop?: ComponentRef<ModalBackdropComponent>;\n    private _backdrop;\n    private isNested;\n    private clickStartedInContent;\n    constructor(_element: ElementRef, _viewContainerRef: ViewContainerRef, _renderer: Renderer2, clf: ComponentLoaderFactory, modalDefaultOption: ModalOptions);\n    onClickStarted(event: MouseEvent): void;\n    onClickStop(event: MouseEvent): void;\n    onEsc(event: KeyboardEvent): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    /** Allows to manually toggle modal visibility */\n    toggle(): void;\n    /** Allows to manually open modal */\n    show(): void;\n    /** Check if we can close the modal */\n    hide(event?: Event): void;\n    /** Private methods @internal */\n    /**\n     *  Manually close modal\n     *  @internal\n     */\n    protected _hide(): void;\n    protected getConfig(config?: ModalOptions): ModalOptions;\n    /**\n     *  Show dialog\n     *  @internal\n     */\n    protected showElement(): void;\n    /** @internal */\n    protected hideModal(): void;\n    /** @internal */\n    protected showBackdrop(callback?: () => void): void;\n    /** @internal */\n    protected removeBackdrop(): void;\n    /** Events tricks */\n    protected focusOtherModal(): void;\n    /** @internal */\n    protected resetAdjustments(): void;\n    /** Scroll bar tricks */\n    /** @internal */\n    protected checkScrollbar(): void;\n    protected setScrollbar(): void;\n    protected resetScrollbar(): void;\n    protected getScrollbarWidth(): number;\n}\n"]}