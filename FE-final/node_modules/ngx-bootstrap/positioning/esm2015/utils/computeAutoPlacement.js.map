{"version":3,"file":"computeAutoPlacement.js","sourceRoot":"","sources":["../../../../../src/positioning/utils/computeAutoPlacement.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n */\nimport { getBoundaries } from './getBoundaries';\nimport { Offsets, PlacementForBs5 } from '../models';\nimport { getBsVer } from 'ngx-bootstrap/utils';\n\nfunction getArea({ width, height }: { width: number, height: number }) {\n  return width * height;\n}\n\nexport function computeAutoPlacement(\n  placement: string,\n  refRect: Offsets,\n  target: HTMLElement,\n  host: HTMLElement,\n  allowedPositions = ['top', 'bottom', 'right', 'left'],\n  boundariesElement = 'viewport',\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(target, host, padding, boundariesElement);\n\n  type Rects = {top: Offsets, right: Offsets, bottom: Offsets, left: Offsets};\n  const rects: Rects = {\n    top: {\n      width: boundaries.width ?? 0,\n      height: refRect.top && boundaries.top ? refRect.top - boundaries.top : 0\n    },\n    right: {\n      width: boundaries.right && refRect.right ? boundaries.right - refRect.right : 0,\n      height: boundaries.height ?? 0\n    },\n    bottom: {\n      width: boundaries.width ?? 0,\n      height: boundaries.bottom && refRect.bottom ? boundaries.bottom - refRect.bottom: 0\n    },\n    left: {\n      width: refRect.left && boundaries.left ? refRect.left - boundaries.left : 0,\n      height: boundaries.height ?? 0\n    }\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map((key) => ({\n      key,\n      ...rects[key as keyof Rects],\n      area: getArea(rects[key as keyof Rects] as {width: number, height: number})\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  let filteredAreas = sortedAreas.filter(\n    ({ width, height }) => {\n      return width >= target.clientWidth\n        && height >= target.clientHeight;\n    }\n  );\n\n  filteredAreas = filteredAreas.filter((position) => {\n    return allowedPositions\n      .some((allowedPosition: string) => {\n        return allowedPosition === position.key;\n      });\n  });\n\n  const computedPlacement: string = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split(' ')[1];\n  // for tooltip on auto position\n  target.className = target.className.replace(/bs-tooltip-auto/g, `bs-tooltip-${getBsVer().isBs5 ? PlacementForBs5[computedPlacement as keyof typeof PlacementForBs5] : computedPlacement}`);\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n"]}