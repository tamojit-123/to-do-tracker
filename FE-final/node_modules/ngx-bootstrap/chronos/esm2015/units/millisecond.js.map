{"version":3,"file":"millisecond.js","sourceRoot":"","sources":["../../../../../src/chronos/units/millisecond.ts"],"names":[],"mappings":"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","sourcesContent":["// FORMATTING\n\nimport { addFormatToken } from '../format/format';\nimport { addRegexToken, match1, match1to3, match2, match3, matchUnsigned } from '../parse/regex';\nimport { MILLISECOND } from './constants';\nimport { toInt } from '../utils/type-checks';\nimport { addParseToken } from '../parse/token';\nimport { DateArray, DateFormatterOptions, WeekParsing } from '../types';\nimport { addUnitAlias } from './aliases';\nimport { addUnitPriority } from './priorities';\nimport { DateParsingConfig } from '../create/parsing.types';\nimport { getMilliseconds } from '../utils/date-getters';\n\n\nexport function initMillisecond() {\n  addFormatToken('S', null, null,\n    function(date: Date, opts: DateFormatterOptions): string {\n      return (~~(getMilliseconds(date, opts.isUTC) / 100)).toString(10);\n    }\n  );\n\n  addFormatToken(null, ['SS', 2, false], null,\n    function(date: Date, opts: DateFormatterOptions): string {\n      return (~~(getMilliseconds(date, opts.isUTC) / 10)).toString(10);\n    }\n  );\n\n  addFormatToken(null, ['SSS', 3, false], null,\n    function(date: Date, opts: DateFormatterOptions): string {\n      return (getMilliseconds(date, opts.isUTC)).toString(10);\n    }\n  );\n  addFormatToken(null, ['SSSS', 4, false], null,\n    function(date: Date, opts: DateFormatterOptions): string {\n      return (getMilliseconds(date, opts.isUTC) * 10).toString(10);\n    }\n  );\n  addFormatToken(null, ['SSSSS', 5, false], null,\n    function(date: Date, opts: DateFormatterOptions): string {\n      return (getMilliseconds(date, opts.isUTC) * 100).toString(10);\n    }\n  );\n  addFormatToken(null, ['SSSSSS', 6, false], null,\n    function(date: Date, opts: DateFormatterOptions): string {\n      return (getMilliseconds(date, opts.isUTC) * 1000).toString(10);\n    }\n  );\n  addFormatToken(null, ['SSSSSSS', 7, false], null,\n    function(date: Date, opts: DateFormatterOptions): string {\n      return (getMilliseconds(date, opts.isUTC) * 10000).toString(10);\n    }\n  );\n  addFormatToken(null, ['SSSSSSSS', 8, false], null,\n    function(date: Date, opts: DateFormatterOptions): string {\n      return (getMilliseconds(date, opts.isUTC) * 100000).toString(10);\n    }\n  );\n  addFormatToken(null, ['SSSSSSSSS', 9, false], null,\n    function(date: Date, opts: DateFormatterOptions): string {\n      return (getMilliseconds(date, opts.isUTC) * 1000000).toString(10);\n    }\n  );\n\n\n// ALIASES\n\n  addUnitAlias('millisecond', 'ms');\n\n// PRIORITY\n\n  addUnitPriority('millisecond', 16);\n\n// PARSING\n\n  addRegexToken('S', match1to3, match1);\n  addRegexToken('SS', match1to3, match2);\n  addRegexToken('SSS', match1to3, match3);\n\n  let token;\n  for (token = 'SSSS'; token.length <= 9; token += 'S') {\n    addRegexToken(token, matchUnsigned);\n  }\n\n  function parseMs(input: string, array: DateArray, config: DateParsingConfig): DateParsingConfig {\n    array[MILLISECOND] = toInt(parseFloat(`0.${input}`) * 1000);\n\n    return config;\n  }\n\n  for (token = 'S'; token.length <= 9; token += 'S') {\n    addParseToken(token, parseMs);\n  }\n// MOMENTS\n}\n"]}