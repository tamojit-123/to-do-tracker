{"version":3,"file":"valid.js","sourceRoot":"","sources":["../../../../../src/chronos/create/valid.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAElD,MAAM,UAAU,OAAO,CAAC,MAAyB;IAC/C,IAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,EAAE;QAC3B,MAAM,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;QACtC,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,UAAU,CAAS;YACtF,OAAO,CAAC,IAAI,IAAI,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,IAAI,UAAU,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;YACvD,KAAK,CAAC,QAAQ,GAAG,CAAC;YAClB,CAAC,KAAK,CAAC,KAAK;YACZ,CAAC,KAAK,CAAC,YAAY;YACnB,CAAC,KAAK,CAAC,cAAc;YACrB,CAAC,KAAK,CAAC,eAAe;YACtB,CAAC,KAAK,CAAC,SAAS;YAChB,CAAC,KAAK,CAAC,aAAa;YACpB,CAAC,KAAK,CAAC,eAAe;YACtB,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC,CAAC;QAEvD,IAAI,MAAM,CAAC,OAAO,EAAE;YAClB,UAAU,GAAG,UAAU;gBACrB,KAAK,CAAC,aAAa,KAAK,CAAC;gBACzB,KAAK,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC;gBAC/B,KAAK,CAAC,OAAO,KAAK,SAAS,CAAC;SAC/B;QAED,IAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACvD,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC;SAC9B;aAAM;YACL,OAAO,UAAU,CAAC;SACnB;KACF;IAED,OAAO,MAAM,CAAC,QAAQ,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,MAAyB,EAAE,KAA8B;IACrF,MAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,KAAK,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;IAE3E,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,MAAyB;IACnD,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;IAExB,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { DateParsingConfig } from './parsing.types';\nimport { getParsingFlags } from './parsing-flags';\n\nexport function isValid(config: DateParsingConfig): boolean {\n  if (config._isValid == null) {\n    const flags = getParsingFlags(config);\n    const parsedParts = Array.prototype.some.call(flags.parsedDateParts, function (i: number) {\n      return i != null;\n    });\n    let isNowValid = !isNaN(config._d && config._d.getTime()) &&\n      flags.overflow < 0 &&\n      !flags.empty &&\n      !flags.invalidMonth &&\n      !flags.invalidWeekday &&\n      !flags.weekdayMismatch &&\n      !flags.nullInput &&\n      !flags.invalidFormat &&\n      !flags.userInvalidated &&\n      (!flags.meridiem || (flags.meridiem && parsedParts));\n\n    if (config._strict) {\n      isNowValid = isNowValid &&\n        flags.charsLeftOver === 0 &&\n        flags.unusedTokens.length === 0 &&\n        flags.bigHour === undefined;\n    }\n\n    if (Object.isFrozen == null || !Object.isFrozen(config)) {\n      config._isValid = isNowValid;\n    } else {\n      return isNowValid;\n    }\n  }\n\n  return config._isValid;\n}\n\nexport function createInvalid(config: DateParsingConfig, flags?: { nullInput: boolean }): DateParsingConfig {\n  config._d = new Date(NaN);\n  Object.assign(getParsingFlags(config), flags || { userInvalidated: true });\n\n  return config;\n}\n\nexport function markInvalid(config: DateParsingConfig): DateParsingConfig {\n  config._isValid = false;\n\n  return config;\n}\n"]}