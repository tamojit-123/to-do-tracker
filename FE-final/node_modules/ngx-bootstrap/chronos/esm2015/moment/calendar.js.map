{"version":3,"file":"calendar.js","sourceRoot":"","sources":["../../../../../src/chronos/moment/calendar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAkB9C,MAAM,UAAU,iBAAiB,CAAC,IAAU,EAAE,GAAS,EAAE,MAAyB;IAChF,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAEnD,QAAQ,IAAI,EAAE;QACZ,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,UAAU,CAAC;QACnC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,UAAU,CAAC;QACnC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC,OAAO,SAAS,CAAC;QACjC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC,OAAO,SAAS,CAAC;QACjC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC,OAAO,SAAS,CAAC;QACjC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC,OAAO,UAAU,CAAC;QAClC,OAAO,CAAC,CAAC,OAAO,UAAU,CAAC;KAC5B;AACH,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,IAAU,EACV,IAAU,EACV,OAAqB,EACrB,SAAiB,SAAS,EAAE,EAC5B,SAA4B,EAAE;IACrD,kDAAkD;IAClD,2EAA2E;IAC3E,MAAM,GAAG,GAAG,IAAI,CAAC;IACjB,MAAM,GAAG,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,EAAG,MAAM,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IAC/E,MAAM,MAAM,GAAG,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,EAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,IAAI,UAAU,CAAC;IAEtF,IAAI,MAAM,CAAC;IACX,IAAI,OAAO,EAAE;QACX,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;YACrB,MAAM,GAAG,OAAO,CAAC;SAClB;QACD,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;YACvB,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;SACxC;KACF;IAED,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;KACxD;IAED,OAAO,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;AACvF,CAAC","sourcesContent":["import { diff } from './diff';\nimport { cloneWithOffset } from '../units/offset';\nimport { isFunction, isString } from '../utils/type-checks';\nimport { cloneDate } from '../create/clone';\nimport { startOf } from '../utils/start-end-of';\nimport { formatDate } from '../format';\nimport { getLocale } from '../locale/locales';\nimport { Locale } from '../locale/locale.class';\nimport { DateInput } from '../testing/chain';\nimport { DateParsingConfig } from '../create/parsing.types';\n\nexport type CalendarSpecVal = string | ((m?: DateInput, now?: Date) => string);\nexport interface CalendarSpec {\n  sameDay?: CalendarSpecVal;\n  nextDay?: CalendarSpecVal;\n  lastDay?: CalendarSpecVal;\n  nextWeek?: CalendarSpecVal;\n  lastWeek?: CalendarSpecVal;\n  sameElse?: CalendarSpecVal;\n\n  // any additional properties might be used with moment.calendarFormat\n  [x: string]: CalendarSpecVal | void; // undefined\n}\n\nexport function getCalendarFormat(date: Date, now: Date, config: DateParsingConfig) {\n  const _diff = diff(date, now, 'day', true, config);\n\n  switch (true) {\n    case _diff < -6: return 'sameElse';\n    case _diff < -1: return 'lastWeek';\n    case _diff < 0: return 'lastDay';\n    case _diff < 1: return 'sameDay';\n    case _diff < 2: return 'nextDay';\n    case _diff < 7: return 'nextWeek';\n    default: return 'sameElse';\n  }\n}\n\nexport function calendar(date: Date,\n                         time: Date,\n                         formats: CalendarSpec,\n                         locale: Locale = getLocale(),\n                         config: DateParsingConfig = {}): string {\n  // We want to compare the start of today, vs this.\n  // Getting start-of-today depends on whether we're local/utc/offset or not.\n  const now = time;\n  const sod = startOf(cloneWithOffset(now, date,  config), 'day', config._isUTC);\n  const format = getCalendarFormat(date, sod, {_isUTC: true, _offset: 0}) || 'sameElse';\n\n  let output;\n  if (formats) {\n    const _format = formats[format];\n    if (isString(_format)) {\n      output = _format;\n    }\n    if (isFunction(_format)) {\n      output = _format.call(null, date, now);\n    }\n  }\n\n  if (!output) {\n    output = locale.calendar(format, date, cloneDate(now));\n  }\n\n  return formatDate(date, output, config._locale._abbr, config._isUTC, config._offset);\n}\n"]}