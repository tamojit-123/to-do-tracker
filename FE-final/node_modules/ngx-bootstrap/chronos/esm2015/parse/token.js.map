{"version":3,"file":"token.js","sourceRoot":"","sources":["../../../../../src/chronos/parse/token.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAIlG,MAAM,MAAM,GAAsC,EAAE,CAAC;AAErD,MAAM,UAAU,aAAa,CAAC,KAAwB,EAAE,QAAmC;IACzF,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACjD,IAAI,IAAI,GAAG,QAAQ,CAAC;IAEpB,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACtB,IAAI,GAAG,UAAU,KAAa,EAAE,KAAgB,EAAE,MAAyB;YACzE,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;YAE/B,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC;KACH;IAED,IAAI,OAAO,CAAS,MAAM,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;QAC/C,IAAI,CAAC,CAAC;QACN,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;SAC1B;KACF;AACH,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,KAAe,EAAE,QAA0B;IAC3E,aAAa,CAAC,KAAK,EAAE,UAAU,KAAa,EAAE,KAAgB,EAAE,MAAyB,EAAE,MAAc;QACvG,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC;QAE5B,OAAO,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC;AAGD,MAAM,UAAU,uBAAuB,CAAC,KAAa,EAAE,KAAa,EAAE,MAAyB;IAC7F,IAAI,KAAK,IAAI,IAAI,IAAI,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;QAC9C,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;KAChD;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { hasOwnProp, isArray, isFunction, isNumber, isString, toInt } from '../utils/type-checks';\nimport { DateParsingConfig } from '../create/parsing.types';\nimport { DateArray, DateParseTokenFn } from '../types';\n\nconst tokens: {[key: string]: DateParseTokenFn} = {};\n\nexport function addParseToken(token: string | string[], callback: DateParseTokenFn | number) {\n  const _token = isString(token) ? [token] : token;\n  let func = callback;\n\n  if (isNumber(callback)) {\n    func = function (input: string, array: DateArray, config: DateParsingConfig): DateParsingConfig {\n      array[callback] = toInt(input);\n\n      return config;\n    };\n  }\n\n  if (isArray<string>(_token) && isFunction(func)) {\n    let i;\n    for (i = 0; i < _token.length; i++) {\n      tokens[_token[i]] = func;\n    }\n  }\n}\n\nexport function addWeekParseToken(token: string[], callback: DateParseTokenFn): void {\n  addParseToken(token, function (input: string, array: DateArray, config: DateParsingConfig, _token: string): DateParsingConfig {\n    config._w = config._w || {};\n\n    return callback(input, config._w, config, _token);\n  });\n}\n\n\nexport function addTimeToArrayFromToken(token: string, input: string, config: DateParsingConfig): DateParsingConfig {\n  if (input != null && hasOwnProp(tokens, token)) {\n    tokens[token](input, config._a, config, token);\n  }\n\n  return config;\n}\n"]}