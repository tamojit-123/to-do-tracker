{"version":3,"file":"button-radio.directive.d.ts","sources":["button-radio.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, OnChanges, Provider, Renderer2, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\nexport declare const RADIO_CONTROL_VALUE_ACCESSOR: Provider;\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nexport declare class ButtonRadioDirective implements ControlValueAccessor, OnChanges {\n    private el;\n    private cdr;\n    private renderer;\n    private group;\n    onChange: Function;\n    onTouched: Function;\n    /** Radio button value, will be set to `ngModel` */\n    btnRadio?: string;\n    /** If `true` — radio button can be unchecked */\n    uncheckable: boolean;\n    /** Current value of radio component or group */\n    get value(): string | undefined;\n    set value(value: string | undefined);\n    /** If `true` — radio button is disabled */\n    get disabled(): boolean;\n    set disabled(disabled: boolean);\n    get controlOrGroupDisabled(): true | undefined;\n    get hasDisabledClass(): boolean | undefined;\n    get isActive(): boolean;\n    readonly role: string;\n    get tabindex(): undefined | number;\n    get hasFocus(): boolean;\n    private _value?;\n    private _disabled;\n    private _hasFocus;\n    constructor(el: ElementRef, cdr: ChangeDetectorRef, renderer: Renderer2, group: ButtonRadioGroupDirective);\n    toggleIfAllowed(): void;\n    onSpacePressed(event: KeyboardEvent): void;\n    focus(): void;\n    onFocus(): void;\n    onBlur(): void;\n    canToggle(): boolean;\n    ngOnChanges(changes: SimpleChanges): void;\n    _onChange(value?: string): void;\n    writeValue(value: string): void;\n    registerOnChange(fn: () => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(disabled: boolean): void;\n}\n"]}