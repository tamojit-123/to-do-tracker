{"version":3,"sources":["../../../../src/buttons/button-checkbox.directive.ts","../../../../src/buttons/button-radio.directive.ts","../../../../src/buttons/button-radio-group.directive.ts","../../../../src/buttons/buttons.module.ts"],"names":["CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ButtonCheckboxDirective","multi","this","btnCheckboxTrue","btnCheckboxFalse","state","isDisabled","onChange","Function","prototype","onTouched","onClick","toggle","value","ngOnInit","trueValue","Object","defineProperty","falseValue","writeValue","setDisabledState","registerOnChange","fn","registerOnTouched","Directive","args","selector","providers","Input","HostBinding","type","HostListener","RADIO_CONTROL_VALUE_ACCESSOR","ButtonRadioDirective","el","cdr","renderer","group","uncheckable","role","_disabled","_hasFocus","_value","_onChange","disabled","undefined","controlOrGroupDisabled","isActive","btnRadio","toggleIfAllowed","canToggle","onSpacePressed","event","preventDefault","focus","nativeElement","onFocus","onBlur","ngOnChanges","changes","markForCheck","setAttribute","removeAttribute","ElementRef","ChangeDetectorRef","Renderer2","ButtonRadioGroupDirective","decorators","Optional","Inject","radioButtons","forEach","buttons","activeRadio","getActiveOrFocusedRadio","firstEnabled","find","r","selectNext","selectInDirection","selectPrevious","direction","buttonRadioDirectives","toArray","currentActiveIndex","indexOf","i","nextIndex","currentIndex","calcIndex","length","button","hasFocus","ContentChildren","ButtonsModule","forRoot","ngModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\ntype AvailableValues = boolean | string | number;\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue:AvailableValues = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse:AvailableValues = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value?: AvailableValues;\n  protected isDisabled = false;\n\n  protected onChange = Function.prototype;\n  protected onTouched = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): AvailableValues {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): AvailableValues {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: boolean | string | null): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnChanges,\n  Optional,\n  Provider,\n  Renderer2,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadio]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnChanges {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() btnRadio?: string;\n  /** If `true` — radio button can be unchecked */\n  @Input() uncheckable = false;\n  /** Current value of radio component or group */\n  @Input()\n  get value() {\n    return this.group ? this.group.value : this._value;\n  }\n\n  set value(value: string | undefined) {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this._value = value;\n    this._onChange(value);\n  }\n  /** If `true` — radio button is disabled */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disabled: boolean) {\n    this.setDisabledState(disabled);\n  }\n\n  @HostBinding('attr.aria-disabled')\n  get controlOrGroupDisabled() {\n    return this.disabled || (this.group && this.group.disabled) ? true : undefined;\n  }\n\n  @HostBinding('class.disabled')\n  get hasDisabledClass() {\n    // Although the radio is disabled the active radio should still stand out.\n    // The disabled class will prevent this so don't add it on the active radio\n    return this.controlOrGroupDisabled && !this.isActive;\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-checked')\n  get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  @HostBinding('attr.role') readonly role: string = 'radio';\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): undefined | number {\n    if (this.controlOrGroupDisabled) {\n      // Disabled radio buttons should not receive focus\n      return undefined;\n    } else if (this.isActive || this.group == null) {\n      return 0;\n    } else {\n      return -1;\n    }\n  }\n\n  get hasFocus(): boolean {\n    return this._hasFocus;\n  }\n\n  private _value?: string;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  constructor(\n    private el: ElementRef,\n    private cdr: ChangeDetectorRef,\n    private renderer: Renderer2,\n    @Optional()\n    @Inject(forwardRef(() => ButtonRadioGroupDirective))\n    private group: ButtonRadioGroupDirective\n  ) {}\n\n  @HostListener('click')\n  toggleIfAllowed(): void {\n    if (!this.canToggle()) {\n      return;\n    }\n\n    if (this.uncheckable && this.btnRadio === this.value) {\n      this.value = undefined;\n    } else {\n      this.value = this.btnRadio;\n    }\n  }\n\n  @HostListener('keydown.space', ['$event'])\n  onSpacePressed(event: KeyboardEvent) {\n    this.toggleIfAllowed();\n    event.preventDefault();\n  }\n\n  focus() {\n    this.el.nativeElement.focus();\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    this._hasFocus = true;\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    this._hasFocus = false;\n    this.onTouched();\n  }\n\n  canToggle(): boolean {\n    return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('uncheckable' in changes) {\n      this.uncheckable = this.uncheckable !== false && typeof this.uncheckable !== 'undefined';\n    }\n  }\n\n  _onChange(value?: string): void {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: string): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    this._disabled = disabled;\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Provider,\n  QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioDirective } from './button-radio.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\n\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\n  radioButtons?: QueryList<ButtonRadioDirective>;\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  private _value?: string;\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: string | undefined) {\n    this._value = value;\n    this.onChange(value);\n  }\n\n  private _disabled = false;\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): null | number {\n    if (this._disabled) {\n      return null;\n    } else {\n      return 0;\n    }\n  }\n\n  writeValue(value?: string): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (this.radioButtons) {\n      this._disabled = disabled;\n      this.radioButtons.forEach(buttons => {\n        buttons.setDisabledState(disabled);\n      });\n      this.cdr.markForCheck();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    if (this._disabled) {\n      return;\n    }\n    const activeRadio = this.getActiveOrFocusedRadio();\n    if (activeRadio) {\n      activeRadio.focus();\n      return;\n    }\n\n    if (this.radioButtons) {\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\n      if (firstEnabled) {\n        firstEnabled.focus();\n      }\n    }\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  @HostListener('keydown.ArrowRight', ['$event'])\n  @HostListener('keydown.ArrowDown', ['$event'])\n  selectNext(event: KeyboardEvent) {\n    this.selectInDirection('next');\n    event.preventDefault();\n  }\n\n  @HostListener('keydown.ArrowLeft', ['$event'])\n  @HostListener('keydown.ArrowUp', ['$event'])\n  selectPrevious(event: KeyboardEvent) {\n    this.selectInDirection('previous');\n    event.preventDefault();\n  }\n\n  private selectInDirection(direction: 'next' | 'previous') {\n    if (this._disabled) {\n      return;\n    }\n\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\n      const step = direction === 'next' ? 1 : -1;\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\n      if (calcIndex < 0) {\n        calcIndex = buttonRadioDirectives.length - 1;\n      }\n\n      return calcIndex;\n    }\n\n    const activeRadio = this.getActiveOrFocusedRadio();\n\n    if (activeRadio && this.radioButtons) {\n      const buttonRadioDirectives = this.radioButtons.toArray();\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\n      for (\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\n        i !== currentActiveIndex;\n        i = nextIndex(i, buttonRadioDirectives)\n      ) {\n        if (buttonRadioDirectives[i].canToggle()) {\n          buttonRadioDirectives[i].toggleIfAllowed();\n          buttonRadioDirectives[i].focus();\n          break;\n        }\n      }\n    }\n  }\n\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\n    if (!this.radioButtons) {\n      return void 0;\n    }\n\n    return this.radioButtons.find(button => button.isActive)\n      || this.radioButtons.find(button => button.hasFocus);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\nimport { ButtonRadioDirective } from './button-radio.directive';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\n@NgModule({\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n})\nexport class ButtonsModule {\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\n    return { ngModule: ButtonsModule, providers: [] };\n  }\n}\n"]}