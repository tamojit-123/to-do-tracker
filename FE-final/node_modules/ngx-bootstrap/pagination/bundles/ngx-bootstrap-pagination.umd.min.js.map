{"version":3,"sources":["../../../../src/pagination/pagination.config.ts","../../../../src/pagination/pager.component.ts","../../../../src/pagination/pagination.component.ts","../../../../src/pagination/pagination.module.ts"],"names":["this","main","itemsPerPage","boundaryLinks","directionLinks","firstText","previousText","nextText","lastText","pageBtnClass","rotate","pager","align","Injectable","args","providedIn","PAGER_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","PagerComponent","multi","elementRef","paginationConfig","changeDetection","disabled","numPages","EventEmitter","pageChanged","onChange","Function","prototype","onTouched","classMap","inited","_itemsPerPage","_totalItems","_totalPages","_page","config","configureOptions","Object","assign","defineProperty","v","totalPages","calculateTotalPages","emit","selectPage","page","value","_previous","markForCheck","ngOnInit","window","nativeElement","getAttribute","maxSize","_a","_b","_c","_d","_e","_f","pages","getPages","writeValue","getText","key","noPrevious","noNext","registerOnChange","fn","registerOnTouched","event","preventDefault","target","blur","makePage","num","text","active","number","currentPage","startPage","endPage","isMaxSized","Math","max","floor","ceil","min","toString","push","previousPageSet","unshift","nextPageSet","totalItems","Component","selector","template","providers","ElementRef","PaginationConfig","ChangeDetectorRef","Input","Output","PAGINATION_CONTROL_VALUE_ACCESSOR","PaginationComponent","PaginationModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["// todo: split\nimport { Injectable } from '@angular/core';\n\nimport { ConfigModel, PagerModel } from './models';\n\n/** Provides default values for Pagination and pager components */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaginationConfig {\n  main: Partial<ConfigModel> = {\n    itemsPerPage: 10,\n    boundaryLinks: false,\n    directionLinks: true,\n    firstText: 'First',\n    previousText: 'Previous',\n    nextText: 'Next',\n    lastText: 'Last',\n    pageBtnClass: '',\n    rotate: true\n  };\n  pager: PagerModel = {\n    itemsPerPage: 15,\n    previousText: '« Previous',\n    nextText: 'Next »',\n    pageBtnClass: '',\n    align: true\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ConfigModel, PagesModel } from './models';\n\nimport { PageChangedEvent } from './pagination.component';\nimport { PaginationConfig } from './pagination.config';\n\nexport const PAGER_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => PagerComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'pager',\n  templateUrl: './pager.component.html',\n  providers: [PAGER_CONTROL_VALUE_ACCESSOR]\n})\nexport class PagerComponent implements ControlValueAccessor, OnInit {\n  config?: Partial<ConfigModel>;\n  /** if `true` aligns each link to the sides of pager */\n  @Input() align = false;\n  /** limit number for page links in pager */\n  @Input() maxSize?: number;\n  /** if false first and last buttons will be hidden */\n  @Input() boundaryLinks = false;\n  /** if false previous and next buttons will be hidden */\n  @Input() directionLinks = true;\n  // labels\n  /** first button text */\n  @Input() firstText = 'First';\n  /** previous button text */\n  @Input() previousText = '« Previous';\n  /** next button text */\n  @Input() nextText = 'Next »';\n  /** last button text */\n  @Input() lastText = 'Last';\n  /** if true current page will in the middle of pages list */\n  @Input() rotate = true;\n  // css\n  /** add class to <code><li\\></code> */\n  @Input() pageBtnClass = '';\n\n  /** if true pagination component will be disabled */\n  @Input() disabled = false;\n\n  /** fired when total pages count changes, $event:number equals to total pages count */\n  @Output() numPages = new EventEmitter<number>();\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to\n   * object with current page index and number of items per page\n   */\n  @Output()\n  pageChanged = new EventEmitter<PageChangedEvent>();\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n  classMap = '';\n  pages?: PagesModel[];\n  protected inited = false;\n\n  constructor(private elementRef: ElementRef,\n              paginationConfig: PaginationConfig,\n              private changeDetection: ChangeDetectorRef) {\n    this.elementRef = elementRef;\n    if (!this.config) {\n      this.configureOptions(\n        Object.assign({}, paginationConfig.main, paginationConfig.pager)\n      );\n    }\n  }\n\n  protected _itemsPerPage = 15;\n\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\n  @Input()\n  get itemsPerPage(): number {\n    return this._itemsPerPage;\n  }\n\n  set itemsPerPage(v: number) {\n    this._itemsPerPage = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  protected _totalItems = 0;\n\n  /** total number of items in all pages */\n  @Input()\n  get totalItems(): number {\n    return this._totalItems;\n  }\n\n  set totalItems(v: number) {\n    this._totalItems = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  protected _totalPages = 0;\n\n  get totalPages(): number {\n    return this._totalPages;\n  }\n\n  set totalPages(v: number) {\n    this._totalPages = v;\n    this.numPages.emit(v);\n    if (this.inited) {\n      this.selectPage(this.page);\n    }\n  }\n\n  protected _page = 1;\n\n  get page(): number {\n    return this._page;\n  }\n\n  set page(value: number) {\n    const _previous = this._page;\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\n    this.changeDetection.markForCheck();\n\n    if (_previous === this._page || typeof _previous === 'undefined') {\n      return;\n    }\n\n    this.pageChanged.emit({\n      page: this._page,\n      itemsPerPage: this.itemsPerPage\n    });\n  }\n\n  configureOptions(config: Partial<ConfigModel>): void {\n    this.config = Object.assign({}, config);\n  }\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n    }\n    // watch for maxSize\n    if (typeof this.maxSize === 'undefined') {\n      this.maxSize = this.config?.maxSize || 0;\n    }\n\n    if (typeof this.rotate === 'undefined') {\n      this.rotate = !!this.config?.rotate;\n    }\n\n    if (typeof this.boundaryLinks === 'undefined') {\n      this.boundaryLinks = !!this.config?.boundaryLinks;\n    }\n\n\n    if (typeof this.directionLinks === 'undefined') {\n      this.directionLinks = !!this.config?.directionLinks;\n    }\n\n    if (typeof this.pageBtnClass === 'undefined') {\n      this.pageBtnClass = this.config?.pageBtnClass || '';\n    }\n\n    // base class\n    if (typeof this.itemsPerPage === 'undefined') {\n      this.itemsPerPage = this.config?.itemsPerPage || 0;\n    }\n\n    this.totalPages = this.calculateTotalPages();\n    // this class\n    this.pages = this.getPages(this.page, this.totalPages);\n    this.inited = true;\n  }\n\n  writeValue(value: number): void {\n    this.page = value;\n    this.pages = this.getPages(this.page, this.totalPages);\n  }\n\n  getText(key: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (this as any)[`${key}Text`] || (this as any).config[`${key}Text`];\n  }\n\n  noPrevious(): boolean {\n    return this.page === 1;\n  }\n\n  noNext(): boolean {\n    return this.page === this.totalPages;\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  selectPage(page: number, event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (!this.disabled) {\n      if (event && event.target) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const target: any = event.target;\n        target.blur();\n      }\n      this.writeValue(page);\n      this.onChange(this.page);\n    }\n  }\n\n  // Create page object used in template\n  protected makePage(num: number,\n                     text: string,\n                     active: boolean): { number: number; text: string; active: boolean } {\n    return { text, number: num, active };\n  }\n\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\n    const pages: PagesModel[] = [];\n\n    // Default page limits\n    let startPage = 1;\n    let endPage = totalPages;\n    const isMaxSized =\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized && this.maxSize) {\n      if (this.rotate) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage =\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // Adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // Add page number links\n    for (let num = startPage; num <= endPage; num++) {\n      const page = this.makePage(num, num.toString(), num === currentPage);\n      pages.push(page);\n    }\n\n    // Add links to move between page sets\n    if (isMaxSized && !this.rotate) {\n      if (startPage > 1) {\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\n        pages.unshift(previousPageSet);\n      }\n\n      if (endPage < totalPages) {\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\n        pages.push(nextPageSet);\n      }\n    }\n\n    return pages;\n  }\n\n  // base class\n  protected calculateTotalPages(): number {\n    const totalPages =\n      this.itemsPerPage < 1\n        ? 1\n        : Math.ceil(this.totalItems / this.itemsPerPage);\n\n    return Math.max(totalPages || 0, 1);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  Provider,\n  TemplateRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ConfigModel, PagesModel, PaginationLinkContext, PaginationNumberLinkContext } from './models';\n\nimport { PaginationConfig } from './pagination.config';\n\nexport interface PageChangedEvent {\n  itemsPerPage: number;\n  page: number;\n}\n\nexport const PAGINATION_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => PaginationComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'pagination',\n  templateUrl: './pagination.component.html',\n  providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]\n})\nexport class PaginationComponent implements ControlValueAccessor, OnInit {\n  config?: Partial<ConfigModel>;\n  /** if `true` aligns each link to the sides of pager */\n  @Input() align = true;\n  /** limit number for page links in pager */\n  @Input() maxSize?: number;\n  /** if false first and last buttons will be hidden */\n  @Input() boundaryLinks = false;\n  /** if false previous and next buttons will be hidden */\n  @Input() directionLinks = true;\n  // labels\n  /** first button text */\n  @Input() firstText = 'First';\n  /** previous button text */\n  @Input() previousText = 'Previous';\n  /** next button text */\n  @Input() nextText = 'Next';\n  /** last button text */\n  @Input() lastText = 'Last';\n  /** if true current page will in the middle of pages list */\n  @Input() rotate = true;\n  // css\n  /** add class to <code><li\\></code> */\n  @Input() pageBtnClass = '';\n  /** if true pagination component will be disabled */\n  @Input() disabled = false;\n  /** custom template for page link */\n  @Input() customPageTemplate?: TemplateRef<PaginationNumberLinkContext>;\n  /** custom template for next link */\n  @Input() customNextTemplate?: TemplateRef<PaginationLinkContext>;\n  /** custom template for previous link */\n  @Input() customPreviousTemplate?: TemplateRef<PaginationLinkContext>;\n  /** custom template for first link */\n  @Input() customFirstTemplate?: TemplateRef<PaginationLinkContext>;\n  /** custom template for last link */\n  @Input() customLastTemplate?: TemplateRef<PaginationLinkContext>;\n\n  /** fired when total pages count changes, $event:number equals to total pages count */\n  @Output() numPages = new EventEmitter<number>();\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to object\n   * with current page index and number of items per page\n   */\n  @Output() pageChanged = new EventEmitter<PageChangedEvent>();\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n  classMap = '';\n  pages?: PagesModel[];\n  protected inited = false;\n\n  constructor(\n    private elementRef: ElementRef,\n    paginationConfig: PaginationConfig,\n    private changeDetection: ChangeDetectorRef\n  ) {\n    this.elementRef = elementRef;\n    if (!this.config) {\n      this.configureOptions(paginationConfig.main);\n    }\n  }\n\n  protected _itemsPerPage = 10;\n\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\n  @Input()\n  get itemsPerPage(): number {\n    return this._itemsPerPage;\n  }\n\n  set itemsPerPage(v: number) {\n    this._itemsPerPage = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  protected _totalItems = 0;\n\n  /** total number of items in all pages */\n  @Input()\n  get totalItems(): number {\n    return this._totalItems;\n  }\n\n  set totalItems(v: number) {\n    this._totalItems = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  protected _totalPages = 0;\n\n  get totalPages(): number {\n    return this._totalPages;\n  }\n\n  set totalPages(v: number) {\n    this._totalPages = v;\n    this.numPages.emit(v);\n    if (this.inited) {\n      this.selectPage(this.page);\n    }\n  }\n\n  protected _page = 1;\n\n  get page(): number {\n    return this._page;\n  }\n\n  set page(value: number) {\n    const _previous = this._page;\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\n    this.changeDetection.markForCheck();\n\n    if (_previous === this._page || typeof _previous === 'undefined') {\n      return;\n    }\n\n    this.pageChanged.emit({\n      page: this._page,\n      itemsPerPage: this.itemsPerPage\n    });\n  }\n\n  configureOptions(config: Partial<ConfigModel>): void {\n    this.config = Object.assign({}, config);\n  }\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n    }\n\n    // watch for maxSize\n    if (typeof this.maxSize === 'undefined') {\n      this.maxSize = this.config?.maxSize || 0;\n    }\n\n    if (typeof this.rotate === 'undefined') {\n      this.rotate = !!this.config?.rotate;\n    }\n\n    if (typeof this.boundaryLinks === 'undefined') {\n      this.boundaryLinks = !!this.config?.boundaryLinks;\n    }\n\n\n    if (typeof this.directionLinks === 'undefined') {\n      this.directionLinks = !!this.config?.directionLinks;\n    }\n\n    if (typeof this.pageBtnClass === 'undefined') {\n      this.pageBtnClass = this.config?.pageBtnClass || '';\n    }\n\n    // base class\n    if (typeof this.itemsPerPage === 'undefined') {\n      this.itemsPerPage = this.config?.itemsPerPage || 0;\n    }\n\n    this.totalPages = this.calculateTotalPages();\n    // this class\n    this.pages = this.getPages(this.page, this.totalPages);\n    this.inited = true;\n  }\n\n  writeValue(value: number): void {\n    this.page = value;\n    this.pages = this.getPages(this.page, this.totalPages);\n  }\n\n  getText(key: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (this as any)[`${key}Text`] || (this as any).config[`${key}Text`];\n  }\n\n  noPrevious(): boolean {\n    return this.page === 1;\n  }\n\n  noNext(): boolean {\n    return this.page === this.totalPages;\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  selectPage(page: number, event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (!this.disabled) {\n      if (event && event.target) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const target: any = event.target;\n        target.blur();\n      }\n      this.writeValue(page);\n      this.onChange(this.page);\n    }\n  }\n\n  // Create page object used in template\n  protected makePage(\n    num: number,\n    text: string,\n    active: boolean\n  ): { number: number; text: string; active: boolean } {\n    return { text, number: num, active };\n  }\n\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\n    const pages: PagesModel[] = [];\n\n    // Default page limits\n    let startPage = 1;\n    let endPage = totalPages;\n    const isMaxSized =\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized && this.maxSize) {\n      if (this.rotate) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage =\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // Adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // Add page number links\n    for (let num = startPage; num <= endPage; num++) {\n      const page = this.makePage(num, num.toString(), num === currentPage);\n      pages.push(page);\n    }\n\n    // Add links to move between page sets\n    if (isMaxSized && !this.rotate) {\n      if (startPage > 1) {\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\n        pages.unshift(previousPageSet);\n      }\n\n      if (endPage < totalPages) {\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\n        pages.push(nextPageSet);\n      }\n    }\n\n    return pages;\n  }\n\n  // base class\n  protected calculateTotalPages(): number {\n    const totalPages =\n      this.itemsPerPage < 1\n        ? 1\n        : Math.ceil(this.totalItems / this.itemsPerPage);\n\n    return Math.max(totalPages || 0, 1);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { PagerComponent } from './pager.component';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PagerComponent, PaginationComponent],\n  exports: [PagerComponent, PaginationComponent]\n})\nexport class PaginationModule {\n  static forRoot(): ModuleWithProviders<PaginationModule> {\n    return { ngModule: PaginationModule, providers: [] };\n  }\n}\n"]}