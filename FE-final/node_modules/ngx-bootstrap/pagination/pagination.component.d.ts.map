{"version":3,"file":"pagination.component.d.ts","sources":["pagination.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, Provider, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ConfigModel, PagesModel, PaginationLinkContext, PaginationNumberLinkContext } from './models';\nimport { PaginationConfig } from './pagination.config';\nexport interface PageChangedEvent {\n    itemsPerPage: number;\n    page: number;\n}\nexport declare const PAGINATION_CONTROL_VALUE_ACCESSOR: Provider;\nexport declare class PaginationComponent implements ControlValueAccessor, OnInit {\n    private elementRef;\n    private changeDetection;\n    config?: Partial<ConfigModel>;\n    /** if `true` aligns each link to the sides of pager */\n    align: boolean;\n    /** limit number for page links in pager */\n    maxSize?: number;\n    /** if false first and last buttons will be hidden */\n    boundaryLinks: boolean;\n    /** if false previous and next buttons will be hidden */\n    directionLinks: boolean;\n    /** first button text */\n    firstText: string;\n    /** previous button text */\n    previousText: string;\n    /** next button text */\n    nextText: string;\n    /** last button text */\n    lastText: string;\n    /** if true current page will in the middle of pages list */\n    rotate: boolean;\n    /** add class to <code><li\\></code> */\n    pageBtnClass: string;\n    /** if true pagination component will be disabled */\n    disabled: boolean;\n    /** custom template for page link */\n    customPageTemplate?: TemplateRef<PaginationNumberLinkContext>;\n    /** custom template for next link */\n    customNextTemplate?: TemplateRef<PaginationLinkContext>;\n    /** custom template for previous link */\n    customPreviousTemplate?: TemplateRef<PaginationLinkContext>;\n    /** custom template for first link */\n    customFirstTemplate?: TemplateRef<PaginationLinkContext>;\n    /** custom template for last link */\n    customLastTemplate?: TemplateRef<PaginationLinkContext>;\n    /** fired when total pages count changes, $event:number equals to total pages count */\n    numPages: EventEmitter<number>;\n    /** fired when page was changed, $event:{page, itemsPerPage} equals to object\n     * with current page index and number of items per page\n     */\n    pageChanged: EventEmitter<PageChangedEvent>;\n    onChange: Function;\n    onTouched: Function;\n    classMap: string;\n    pages?: PagesModel[];\n    protected inited: boolean;\n    constructor(elementRef: ElementRef, paginationConfig: PaginationConfig, changeDetection: ChangeDetectorRef);\n    protected _itemsPerPage: number;\n    /** maximum number of items per page. If value less than 1 will display all items on one page */\n    get itemsPerPage(): number;\n    set itemsPerPage(v: number);\n    protected _totalItems: number;\n    /** total number of items in all pages */\n    get totalItems(): number;\n    set totalItems(v: number);\n    protected _totalPages: number;\n    get totalPages(): number;\n    set totalPages(v: number);\n    protected _page: number;\n    get page(): number;\n    set page(value: number);\n    configureOptions(config: Partial<ConfigModel>): void;\n    ngOnInit(): void;\n    writeValue(value: number): void;\n    getText(key: string): string;\n    noPrevious(): boolean;\n    noNext(): boolean;\n    registerOnChange(fn: () => void): void;\n    registerOnTouched(fn: () => void): void;\n    selectPage(page: number, event?: Event): void;\n    protected makePage(num: number, text: string, active: boolean): {\n        number: number;\n        text: string;\n        active: boolean;\n    };\n    protected getPages(currentPage: number, totalPages: number): PagesModel[];\n    protected calculateTotalPages(): number;\n}\n"]}