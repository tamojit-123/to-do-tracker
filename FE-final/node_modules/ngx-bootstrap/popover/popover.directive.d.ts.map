{"version":3,"file":"popover.directive.d.ts","sources":["popover.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService, AvailbleBSPositions } from 'ngx-bootstrap/positioning';\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\nexport declare class PopoverDirective implements OnInit, OnDestroy {\n    private _elementRef;\n    private _renderer;\n    private _positionService;\n    /** unique id popover - use for aria-describedby */\n    popoverId: number;\n    /** sets disable adaptive position */\n    adaptivePosition: boolean;\n    /**\n     * Content to be displayed as popover.\n     */\n    popover?: string | TemplateRef<any>;\n    /**\n     * Context to be used if popover is a template.\n     */\n    popoverContext: any;\n    /**\n     * Title of a popover.\n     */\n    popoverTitle?: string;\n    /**\n     * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n     */\n    placement: AvailbleBSPositions;\n    /**\n     * Close popover on outside click\n     */\n    outsideClick: boolean;\n    /**\n     * Specifies events that should trigger. Supports a space separated list of\n     * event names.\n     */\n    triggers: string;\n    /**\n     * A selector specifying the element the popover should be appended to.\n     */\n    container?: string;\n    /**\n     * Css class for popover container\n     */\n    containerClass: string;\n    /**\n     * Returns whether or not the popover is currently being shown\n     */\n    get isOpen(): boolean;\n    set isOpen(value: boolean);\n    /**\n     * Delay before showing the tooltip\n     */\n    delay: number;\n    /**\n     * Emits an event when the popover is shown\n     */\n    onShown: EventEmitter<unknown>;\n    /**\n     * Emits an event when the popover is hidden\n     */\n    onHidden: EventEmitter<unknown>;\n    protected _popoverCancelShowFn?: () => void;\n    protected _delayTimeoutId?: number;\n    private _popover;\n    private _isInited;\n    private _ariaDescribedby?;\n    constructor(_config: PopoverConfig, _elementRef: ElementRef, _renderer: Renderer2, _viewContainerRef: ViewContainerRef, cis: ComponentLoaderFactory, _positionService: PositioningService);\n    /**\n     * Set attribute aria-describedBy for element directive and\n     * set id for the popover\n     */\n    setAriaDescribedBy(): void;\n    /**\n     * Opens an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     */\n    show(): void;\n    /**\n     * Closes an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     */\n    hide(): void;\n    /**\n     * Toggles an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     */\n    toggle(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n}\n"]}