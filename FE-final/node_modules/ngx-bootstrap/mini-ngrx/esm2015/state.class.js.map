{"version":3,"file":"state.class.js","sourceRoot":"","sources":["../../../../src/mini-ngrx/state.class.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,eAAe,EAAc,cAAc,EAAE,MAAM,MAAM,CAAC;AACnE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAGjD,MAAM,OAAO,SAAa,SAAQ,eAAkB;IAClD,YACE,aAAgB,EAChB,kBAAsC,EACtC,OAAyB;QAEzB,KAAK,CAAC,aAAa,CAAC,CAAC;QAErB,MAAM,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAC5C,SAAS,CAAC,cAAc,CAAC,CAC1B,CAAC;QACF,MAAM,MAAM,GAAG,cAAc,CAAC,IAAI,CAChC,IAAI,CAAC,CAAC,KAAQ,EAAE,MAAc,EAAE,EAAE;YAChC,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,KAAK,CAAC;aACd;YAED,OAAO,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAChC,CAAC,EACD,aAAa,CACd,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,CAAC,KAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACnD,CAAC;CACF","sourcesContent":["/**\n * @copyright ngrx\n */\nimport { Action, ActionReducer } from './index';\nimport { BehaviorSubject, Observable, queueScheduler } from 'rxjs';\nimport { observeOn, scan } from 'rxjs/operators';\n\n\nexport class MiniState<T> extends BehaviorSubject<T> {\n  constructor(\n    _initialState: T,\n    actionsDispatcher$: Observable<Action>,\n    reducer: ActionReducer<T>\n  ) {\n    super(_initialState);\n\n    const actionInQueue$ = actionsDispatcher$.pipe(\n      observeOn(queueScheduler)\n    );\n    const state$ = actionInQueue$.pipe(\n      scan((state: T, action: Action) => {\n        if (!action) {\n          return state;\n        }\n\n        return reducer(state, action);\n      },\n      _initialState\n    ));\n\n    state$.subscribe((value: T) => this.next(value));\n  }\n}\n"]}