{"version":3,"file":"sortable.component.d.ts","sources":["sortable.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DraggableItem } from './draggable-item';\nimport { DraggableItemService } from './draggable-item.service';\nexport declare class SortableComponent implements ControlValueAccessor {\n    private static globalZoneIndex;\n    /** field name if input array consists of objects */\n    fieldName?: string;\n    /** class name for items wrapper */\n    wrapperClass: string;\n    /** style object for items wrapper */\n    wrapperStyle: Record<string, string>;\n    /** class name for item */\n    itemClass: string;\n    /** style object for item */\n    itemStyle: Record<string, string>;\n    /** class name for active item */\n    itemActiveClass: string;\n    /** style object for active item */\n    itemActiveStyle: Record<string, string>;\n    /** class name for placeholder */\n    placeholderClass: string;\n    /** style object for placeholder */\n    placeholderStyle: Record<string, string>;\n    /** placeholder item which will be shown if collection is empty */\n    placeholderItem: string;\n    /** used to specify a custom item template. Template variables: item and index; */\n    itemTemplate?: TemplateRef<unknown>;\n    /** fired on array change (reordering, insert, remove), same as <code>ngModelChange</code>.\n     *  Returns new items collection as a payload.\n     */\n    onChange: EventEmitter<unknown[]>;\n    showPlaceholder: boolean;\n    activeItem: number;\n    get items(): SortableItem[];\n    set items(value: SortableItem[]);\n    onTouched: any;\n    onChanged: any;\n    private transfer;\n    private currentZoneIndex;\n    private _items;\n    constructor(transfer: DraggableItemService);\n    onItemDragstart(event: DragEvent, item: SortableItem, i: number): void;\n    onItemDragover(event: DragEvent, i: number): void;\n    cancelEvent(event?: DragEvent | MouseEvent): void;\n    onDrop(item: DraggableItem): void;\n    resetActiveItem(event?: DragEvent | MouseEvent): void;\n    registerOnChange(callback: () => void): void;\n    registerOnTouched(callback: () => void): void;\n    writeValue(value: any[]): void;\n    updatePlaceholderState(): void;\n    getItemStyle(isActive: boolean): Record<string, string>;\n    private initDragstartEvent;\n}\nexport declare interface SortableItem {\n    id: number;\n    value: string;\n    initData: any;\n}\n"]}