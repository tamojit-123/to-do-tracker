{"version":3,"file":"progressbar.component.js","sourceRoot":"","sources":["../../../../src/progressbar/progressbar.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAE1E,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAiBzD,MAAM,OAAO,oBAAoB;IAgC/B,YAAY,MAAyB;QA/BrC,8CAA8C;QACrC,QAAG,GAAG,GAAG,CAAC;QAEnB,gEAAgE;QACvD,YAAO,GAAG,KAAK,CAAC;QAEzB,6CAA6C;QACpC,YAAO,GAAG,KAAK,CAAC;QAoBzB,cAAS,GAAG,KAAK,CAAC;QAClB,WAAM,GAAI,CAAC,CAAC;QAIV,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IArBD;;OAEG;IACH,IACI,KAAK,CAAC,KAA0B;QAClC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;SACvB;aAAM;YACL,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;IACH,CAAC;;;YAzCF,SAAS,SAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,ofAA2C;gBAC3C,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,qEAAqE;gBACrE,IAAI,EAAE;oBACJ,kBAAkB,EAAE,MAAM;oBAC1B,YAAY,EAAE,KAAK;iBACpB;yBACQ;;;;OAIJ;aACN;;;YAhBQ,iBAAiB;;;kBAmBvB,KAAK;sBAGL,KAAK;sBAGL,KAAK;mBAGL,KAAK;oBAKL,KAAK","sourcesContent":["import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { BarValue, ProgressbarType } from './progressbar-type.interface';\nimport { ProgressbarConfig } from './progressbar.config';\n\n@Component({\n  selector: 'progressbar',\n  templateUrl: './progressbar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    '[class.progress]': 'true',\n    '[attr.max]': 'max'\n  },\n  styles: [`\n    :host {\n      width: 100%;\n      display: flex;\n    } `]\n})\nexport class ProgressbarComponent {\n  /** maximum total value of progress element */\n  @Input() max = 100;\n\n  /** if `true` changing value of progress bar will be animated */\n  @Input() animate = false;\n\n  /** If `true`, striped classes are applied */\n  @Input() striped = false;\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type?: ProgressbarType;\n\n  /** current value of progress bar. Could be a number or array of objects\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n   */\n  @Input()\n  set value(value: number | BarValue[]) {\n    this.isStacked = Array.isArray(value);\n    if (typeof value === 'number') {\n      this._value = value;\n      this._values = void 0;\n    } else {\n      this._value = void 0;\n      this._values = value;\n    }\n  }\n\n  isStacked = false;\n  _value? = 0;\n  _values?: BarValue[];\n\n  constructor(config: ProgressbarConfig) {\n    Object.assign(this, config);\n  }\n}\n"]}