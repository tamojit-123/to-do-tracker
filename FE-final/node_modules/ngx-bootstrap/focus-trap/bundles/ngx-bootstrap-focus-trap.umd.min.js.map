{"version":3,"sources":["../../../../src/focus-trap/platform.ts","../../../../src/focus-trap/focus-trap-manager.ts","../../../../src/focus-trap/interactivity-checker.ts","../../../../src/focus-trap/boolean-property.ts","../../../../src/focus-trap/focus-trap.ts","../../../../src/focus-trap/focus-trap.module.ts"],"names":["hasV8BreakIterator","FocusTrapManager","this","_focusTrapStack","prototype","register","focusTrap","filter","ft","stack","length","_disable","push","_enable","deregister","i","indexOf","splice","Injectable","args","providedIn","Intl","v8BreakIterator","_a","_platformId","isBrowser","isPlatformBrowser","document","EDGE","test","navigator","userAgent","TRIDENT","BLINK","window","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","Object","decorators","type","Inject","PLATFORM_ID","InteractivityChecker","_platform","isDisabled","element","hasAttribute","isVisible","offsetWidth","offsetHeight","getClientRects","hasGeometry","getComputedStyle","visibility","isTabbable","node","frameElement","getFrameElement","ownerDocument","defaultView","getTabIndexValue","nodeName","toLowerCase","tabIndexValue","inputType","isPotentiallyTabbableIOS","tabIndex","isFocusable","config","isInputElement","isHiddenInput","isNativeFormElement","isAnchorElement","isAnchorWithHref","hasValidTabIndex","isPotentiallyFocusable","ignoreVisibility","undefined","getAttribute","isNaN","parseInt","coerceBooleanProperty","value","Platform","FocusTrap","_element","_checker","_ngZone","_document","deferAnchors","_this","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","defineProperty","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","startAnchor","endAnchor","removeEventListener","parentNode","removeChild","runOutsideAngular","_createAnchor","addEventListener","insertBefore","nextSibling","focusInitialElementWhenReady","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","querySelectorAll","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","focusableChild","focus","hasAttached","root","children","childNodes","tabbableChild","nodeType","ELEMENT_NODE","anchor","createElement","classList","add","setAttribute","isEnabled","removeAttribute","toggleAnchors","enabled","fn","isStable","onStable","pipe","take","subscribe","FocusTrapFactory","create","deferCaptureElements","NgZone","DOCUMENT","FocusTrapDirective","_elementRef","_focusTrapFactory","_previouslyFocusedElement","_autoCapture","nativeElement","ngOnDestroy","ngAfterContentInit","autoCapture","_captureFocus","ngDoCheck","ngOnChanges","changes","autoCaptureChange","firstChange","activeElement","Directive","selector","exportAs","ElementRef","Input","FocusTrapModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* eslint-disable */\n\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = (typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator);\n} catch {\n  hasV8BreakIterator = false;\n}\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({ providedIn: 'root' })\nexport class Platform {\n  // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n  /** Whether the Angular application is being rendered in the browser. */\n  isBrowser: boolean = this._platformId ?\n    isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n\n  /** Whether the current browser is Microsoft Edge. */\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Microsoft Trident. */\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  /** Whether the current rendering engine is Blink. */\n  BLINK: boolean = this.isBrowser && (!!((window as any).chrome || hasV8BreakIterator) &&\n    typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  /** Whether the current rendering engine is WebKit. */\n  WEBKIT: boolean = this.isBrowser &&\n    /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n\n  /** Whether the current platform is Apple iOS. */\n  IOS: boolean = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n    !('MSStream' in window);\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  /** Whether the current browser is Firefox. */\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  /** Whether the current platform is Android. */\n    // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  /** Whether the current browser is Safari. */\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n  constructor(@Inject(PLATFORM_ID) private _platformId: Object) {\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* eslint-disable */\n\nimport { Injectable } from '@angular/core';\n\n/**\n * A FocusTrap managed by FocusTrapManager.\n * Implemented by ConfigurableFocusTrap to avoid circular dependency.\n */\nexport interface ManagedFocusTrap {\n  _enable(): void;\n  _disable(): void;\n  focusInitialElementWhenReady(): Promise<boolean>;\n}\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapManager {\n  // A stack of the FocusTraps on the page. Only the FocusTrap at the\n  // top of the stack is active.\n  private _focusTrapStack: ManagedFocusTrap[] = [];\n\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n  register(focusTrap: ManagedFocusTrap): void {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);\n\n    let stack = this._focusTrapStack;\n\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n\n    stack.push(focusTrap);\n    focusTrap._enable();\n  }\n\n  /**\n   * Removes the FocusTrap from the stack, and activates the\n   * FocusTrap that is the new top of the stack.\n   */\n  deregister(focusTrap: ManagedFocusTrap): void {\n    focusTrap._disable();\n\n    const stack = this._focusTrapStack;\n\n    const i = stack.indexOf(focusTrap);\n    if (i !== -1) {\n      stack.splice(i, 1);\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* eslint-disable */\n\nimport { Platform } from './platform';\nimport { Injectable } from '@angular/core';\n\n/**\n * Configuration for the isFocusable method.\n */\nexport class IsFocusableConfig {\n  /**\n   * Whether to count an element as focusable even if it is not currently visible.\n   */\n  ignoreVisibility: boolean = false;\n}\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n@Injectable({ providedIn: 'root' })\nexport class InteractivityChecker {\n\n  constructor(private _platform: Platform) {\n  }\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Browsers disable tabbing to an element inside of an invisible frame.\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    }\n\n    // In iOS, the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      }\n      // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      }\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n      if (tabIndexValue !== null) {\n        return true;\n      }\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement, config?: IsFocusableConfig): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) &&\n      (config?.ignoreVisibility || this.isVisible(element));\n  }\n\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight ||\n    (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n    nodeName === 'select' ||\n    nodeName === 'button' ||\n    nodeName === 'textarea';\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return inputType === 'text'\n    || inputType === 'password'\n    || nodeName === 'select'\n    || nodeName === 'textarea';\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n    isAnchorWithHref(element) ||\n    element.hasAttribute('contenteditable') ||\n    hasValidTabIndex(element);\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* eslint-disable */\n\n/**\n * Type describing the allowed values for a boolean input.\n * @docs-private\n */\nexport type BooleanInput = string | boolean | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* eslint-disable */\n\nimport { coerceBooleanProperty, BooleanInput } from './boolean-property';\nimport { DOCUMENT } from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  DoCheck,\n  SimpleChanges,\n  OnChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { InteractivityChecker } from './interactivity-checker';\n\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to misalign.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\nexport class FocusTrap {\n  private _startAnchor?: HTMLElement | null;\n  private _endAnchor?: HTMLElement | null;\n  private _hasAttached = false;\n\n  // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n  protected startAnchorListener = () => this.focusLastTabbableElement();\n  protected endAnchorListener = () => this.focusFirstTabbableElement();\n\n  /** Whether the focus trap is active. */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n\n  protected _enabled: boolean = true;\n\n  constructor(\n    readonly _element: HTMLElement,\n    private _checker: InteractivityChecker,\n    readonly _ngZone: NgZone,\n    readonly _document: Document,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n\n      if (startAnchor.parentNode) {\n        startAnchor.parentNode.removeChild(startAnchor);\n      }\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n\n      if (endAnchor.parentNode) {\n        endAnchor.parentNode.removeChild(endAnchor);\n      }\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors(): boolean {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor!.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor!.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusInitialElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusFirstTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusLastTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n      `[cdkFocusRegion${bound}], ` +\n      `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>;\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n          `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n          `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n          `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n          `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ?\n      markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n  focusInitialElement(): boolean {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n      `[cdkFocusInitial]`) as HTMLElement;\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n          `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n          `will be removed in 8.0.0`, redirectToElement);\n      }\n\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement) as HTMLElement;\n        focusableChild?.focus();\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusFirstTabbableElement(): boolean {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusLastTabbableElement(): boolean {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n  hasAttached(): boolean {\n    return this._hasAttached;\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n        this._getFirstTabbableElement(children[i] as HTMLElement) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n        this._getLastTabbableElement(children[i] as HTMLElement) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Creates an anchor element. */\n  private _createAnchor(): HTMLElement {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n  protected toggleAnchors(enabled: boolean) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n\n  /** Executes a function when the zone is stable. */\n  private _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\n@Injectable({ providedIn: 'root' })\nexport class FocusTrapFactory {\n  private _document: Document;\n\n  constructor(\n    private _checker: InteractivityChecker,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\n    return new FocusTrap(\n      element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n}\n\n/** Directive for trapping focus within a region. */\n@Directive({\n  selector: '[focusTrap]',\n  exportAs: 'focusTrap'\n})\nexport class FocusTrapDirective implements OnDestroy, AfterContentInit, OnChanges, DoCheck {\n  private _document: Document;\n\n  /** Underlying FocusTrap instance. */\n  focusTrap: FocusTrap;\n\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n  private _previouslyFocusedElement: HTMLElement | null = null;\n\n  /** Whether the focus trap is active. */\n  @Input('cdkTrapFocus')\n  get enabled(): boolean {\n    return this.focusTrap.enabled;\n  }\n\n  set enabled(value: boolean) {\n    this.focusTrap.enabled = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  @Input('cdkTrapFocusAutoCapture')\n  get autoCapture(): boolean {\n    return this._autoCapture;\n  }\n\n  set autoCapture(value: boolean) {\n    this._autoCapture = coerceBooleanProperty(value);\n  }\n\n  private _autoCapture = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusTrapFactory: FocusTrapFactory,\n    @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const autoCaptureChange = changes['autoCapture'];\n\n    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture &&\n      this.focusTrap.hasAttached()) {\n      this._captureFocus();\n    }\n  }\n\n  private _captureFocus() {\n    this._previouslyFocusedElement = this._document.activeElement as HTMLElement;\n    this.focusTrap.focusInitialElementWhenReady();\n  }\n\n  static ngAcceptInputType_enabled: BooleanInput;\n  static ngAcceptInputType_autoCapture: BooleanInput;\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FocusTrapManager } from './focus-trap-manager';\nimport { InteractivityChecker } from './interactivity-checker';\nimport { FocusTrapDirective } from './focus-trap';\nimport { Platform } from './platform';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [FocusTrapDirective],\n  exports: [FocusTrapDirective]\n})\nexport class FocusTrapModule {\n  static forRoot(): ModuleWithProviders<FocusTrapModule> {\n    return {\n      ngModule: FocusTrapModule,\n      providers: [\n        FocusTrapManager,\n        Platform,\n        InteractivityChecker\n      ]\n    };\n  }\n}\n"]}